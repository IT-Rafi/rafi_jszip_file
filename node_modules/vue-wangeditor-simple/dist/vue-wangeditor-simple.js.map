{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///vue-wangeditor-simple.js","webpack:///webpack/bootstrap e3d668dd160a79c8b8b2","webpack:///src/editor.vue","webpack:///./src/index.js","webpack:///./src/editor.vue","webpack:///./node_modules/vue-loader/lib/component-normalizer.js","webpack:///./node_modules/wangeditor/release/wangEditor.js","webpack:///./src/editor.css?f59e","webpack:///./src/editor.css","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./node_modules/vue-style-loader/lib/addStylesClient.js","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./src/plugins/fullscreen.js","webpack:///./src/plugins/clearStyle.js","webpack:///./src/plugins/clearFormat.js","webpack:///./src/plugins/clearAll.js","webpack:///./src/plugins/insertCode.js","webpack:///./src/editor.vue?a01b"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0_wangeditor__","__WEBPACK_IMPORTED_MODULE_0_wangeditor___default","__WEBPACK_IMPORTED_MODULE_1__editor_css__","__WEBPACK_IMPORTED_MODULE_2__plugins_fullscreen__","__WEBPACK_IMPORTED_MODULE_3__plugins_clearStyle__","__WEBPACK_IMPORTED_MODULE_4__plugins_clearFormat__","__WEBPACK_IMPORTED_MODULE_5__plugins_clearAll__","__WEBPACK_IMPORTED_MODULE_6__plugins_insertCode__","mixins","props","options","type","default","_","id","String","initContent","value","disabled","Boolean","data","editor","watch","val","txt","html","$emit","text","$textElem","attr","computed","editorEle","document","querySelector","toolbar","container","textWrap","menuBtns","querySelectorAll","methods","createBtn","btnHtml","btn","createElement","className","innerHTML","initSize","width","style","height","fixedCss","length","Array","from","map","getAttribute","removeAttribute","cssText","replace","mounted","_this","a","customConfig","onchange","keys","create","menus","includes","initClearStyle","initClearFormat","initClearAll","initInsertCode","initFullscreen","__WEBPACK_IMPORTED_MODULE_0__editor_vue__","VueWangeditor","install","Vue","component","window","use","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_editor_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_3aa57f8a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_editor_vue__","normalizeComponent","Component","rawScriptExports","compiledTemplate","functionalTemplate","injectStyles","scopeId","moduleIdentifier","esModule","scriptExports","render","staticRenderFns","_compiled","functional","_scopeId","hook","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","existing","beforeCreate","_injectStyles","h","concat","global","createElemByHTML","div","children","isDOMList","selector","HTMLCollection","NodeList","result","DomElement","nodeType","selectorResult","trim","indexOf","$","objForEach","obj","fn","key","arrForEach","fakeArr","item","getRandom","prefix","Math","random","toString","slice","replaceHtmlSymbol","isFunction","Bold","$elem","_active","DropList","menu","opt","$container","$title","titleHtml","replaceLang","addClass","append","list","onClick","_emptyFn","$list","forEach","elemHtml","$li","on","e","hideTimeoutId","setTimeout","hide","_rendered","_show","Head","droplist","_command","FontSize","FontName","config","fontNames","fontName","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","colors","color","BackColor","Quote","Code","Emoticon","Table","Video","Image","imgMenuId","Menus","getPasteText","clipboardData","originalEvent","pasteText","getData","getPasteHtml","filterStyle","ignoreImg","pasteHtml","docSplitHtml","split","getPasteImgs","items","test","push","getAsFile","getChildrenJSON","childNodes","curElem","elemResult","textContent","tag","nodeName","toLowerCase","attrData","attrList","attributes","attrListLength","attrs","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$textContainerElem","$bar","UploadImg","Editor","toolbarSelector","textSelector","Error","editorId","eventList","constructor","elem","clone","deep","cloneList","cloneNode","index","first","last","types","addEventListener","target","matches","off","removeEventListener","setAttribute","arr","filter","join","removeClass","css","currentStyle","styleArr","resultArr","show","$children","child","appendChild","remove","parentElement","removeChild","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","find","focus","parentUntil","_currentElem","results","equal","insertBefore","$referenceNode","referenceNode","parentNode","insertAfter","lastChild","nextSibling","offAll","emotions","title","content","alt","src","zIndex","debug","linkCheck","link","linkImgCheck","pasteFilterStyle","pasteIgnoreImg","pasteTextHandle","showLinkImg","linkImgCallback","url","uploadImgMaxSize","uploadImgShowBase64","uploadFileName","uploadImgParams","uploadImgHeaders","withCredentials","uploadImgTimeout","uploadImgHooks","before","xhr","files","success","fail","error","timeout","qiniu","UA","_ua","navigator","userAgent","isWebkit","isIE","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","str","langArgs","reg","clearTimeout","$menuELem","menuHeight","showTimeoutId","$selectionElem","getSelectionContainerElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","$body","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","tpl","$content","_index","stopPropagation","events","event","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","selectionText","checkResult","alert","$selectionELem","$parent","$targetELem","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","tabConfig","emotData","emotType","faceHtml","$target","insertHtml","_insert","emotHtml","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","_this2","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$tbody","$trs","trLength","tr","locationData","trData","$currentTr","tdData","newTr","tdIndex","$currentTd","$table","textValId","width30","width50","width100","delBtn","tabsConfig","$img","_selectedImg","uploadImg","upTriggerId","upFileId","linkUrlId","linkBtnId","$file","fileElem","click","fileList","$linkUrl","insertLinkImg","tabsConfigResult","uploadImgServer","customUploadImg","FileReader","MenuConstructors","bold","head","fontSize","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","code","emoticon","table","video","image","init","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","getJSON","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","_dragHandle","saveRange","insertEmptyP","$p","pHandle","codeHandle","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","keyCode","txtHtml","canDo","now","Date","flag","pasteTime","resetTime","ex","pasteFiles","img","dataTransfer","_useStyleWithCSS","execCommand","_name","_execCommand","change","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","timeoutId","_hide","_typeof","Symbol","iterator","_alert","alertInfo","debugInfo","customAlert","onload","callback","onerror","onabort","_this3","maxSize","maxSizeM","maxLength","uploadImgMaxLength","uploadImgParamsWithUrl","hooks","resultFiles","errInfo","file","size","bind","formdata","FormData","uploadImgServerArr","uploadImgServerHash","XMLHttpRequest","open","ontimeout","upload","onprogress","percent","progressBar","lengthComputable","loaded","total","onreadystatechange","readyState","status","responseText","JSON","parse","customInsert","errno","beforeResult","prevent","msg","setRequestHeader","send","reader","readAsDataURL","_initConfig","assign","langConfig","lang","RegExp","_initDom","$toolbarSelector","config$$1","toolbarElemId","textElemId","compositionEnd","onfocus","onblur","isFocus","isChild","isToolbar","isMenu","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchangeTimeout","currentHtml","_offAllEvent","varArgs","TypeError","to","arguments","nextSource","nextKey","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","ownerDocument","getElementsByTagName","wangEditor","locals","cssWithMappingToString","useSourceMap","cssMapping","btoa","sourceMapping","toComment","sources","source","sourceRoot","sourceMap","unescape","encodeURIComponent","stringify","mediaQuery","alreadyImportedModules","addStylesToDom","styles","domStyle","stylesInDom","refs","j","parts","addStyle","createStyleElement","styleElement","update","ssrIdKey","isProduction","noop","isOldIE","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","applyToTag","newObj","media","styleSheet","replaceText","cssNode","createTextNode","ssrId","firstChild","hasDocument","DEBUG","listToStyles","parentId","_isProduction","_options","newList","mayRemove","textStore","replacement","newStyles","part","fullscreen","enlarge","isFullscreen","fullscreenBtn","clearStyle","clearStyleBtn","clearFormat","startsWith","clearFormatBtn","formatContent","clearAll","clearAllBtn","insertCode","insertCodeBtn","pannel","display","createPannel","bindEvents","close","input","textarea","submit","h2","innerText","_vm","_h","$createElement","_self","_c","esExports"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAA,2BAAAH,GACA,gBAAAC,SACAA,QAAA,yBAAAD,IAEAD,EAAA,yBAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,SAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQ+B,EAAqBzB,GAE7C,YACqB,IAAI0B,GAA2C1B,EAAoB,GAC/D2B,EAAmD3B,EAAoBiB,EAAES,GACzEE,EAA4C5B,EAAoB,GAEhE6B,GADoD7B,EAAoBiB,EAAEW,GACtB5B,EAAoB,KACxE8B,EAAoD9B,EAAoB,IACxE+B,EAAqD/B,EAAoB,IACzEgC,EAAkDhC,EAAoB,IACtEiC,EAAoDjC,EAAoB,GE5EjGyB,GAAA,GACAhB,KAAA,gBACAyB,QAAAL,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,GACAE,OACAC,SACAC,KAAAzB,OACA0B,QAAA,SAAAC,GAAA,WAEAC,GAAAC,OACAC,YAAAD,OACAE,MAAAF,OACAG,SAAAC,SAEAC,KAbA,WAcA,OACAC,YAGAC,OACAN,YADA,SACAO,GACAnD,KAAAiD,OAAAG,IAAAC,KAAAF,GACAnD,KAAAsD,MAAA,QAAAH,GAEAnD,KAAAsD,MAAA,WAAAtD,KAAAiD,OAAAG,IAAAG,SAEAT,SAPA,SAOAK,GACAnD,KAAAiD,OAAAO,UAAAC,KAAA,mBAAAN,KAGAO,UACAC,UADA,WAEA,GAAAC,SAAAC,cAAA,IAAA7D,KAAA0C,IACA,MAAAkB,UAAAC,cAAA,IAAA7D,KAAA0C,KAGAoB,QANA,WAOA,GAAAF,SAAAC,cAAA,IAAA7D,KAAA0C,GAAA,iBACA,MAAAkB,UAAAC,cAAA,IAAA7D,KAAA0C,GAAA,kBAGAqB,UAXA,WAYA,GAAAH,SAAAC,cAAA,IAAA7D,KAAA0C,GAAA,wBACA,MAAAkB,UAAAC,cAAA,IAAA7D,KAAA0C,GAAA,yBAGAsB,SAhBA,WAiBA,GAAAJ,SAAAC,cAAA,IAAA7D,KAAA0C,GAAA,cACA,MAAAkB,UAAAC,cAAA,IAAA7D,KAAA0C,GAAA,eAGAuB,SArBA,WAsBA,GAAAL,SAAAM,iBAAA,IAAAlE,KAAA0C,GAAA,cACA,MAAAkB,UAAAM,iBAAA,IAAAlE,KAAA0C,GAAA,gBAIAyB,SACAC,UADA,SACAC,GACA,GAAAC,GAAAV,SAAAW,cAAA,MAIA,OAHAD,GAAAE,UAAA,WAEAF,EAAAG,UAAAJ,EACAC,GAEAI,SARA,WASA1E,KAAAsC,QAAAqC,QACA3E,KAAA+D,UAAAa,MAAAD,MAAA3E,KAAAsC,QAAAqC,MACA3E,KAAA8D,QAAAc,MAAAD,MAAA3E,KAAAsC,QAAAqC,OAEA3E,KAAAsC,QAAAuC,SACA7E,KAAA+D,UAAAa,MAAAC,OAAA7E,KAAAsC,QAAAuC,SAGAC,SAjBA,WAoBA9E,KAAAiE,SAAAc,OAAA,GACAC,MAAAC,KAAAjF,KAAAiE,UAAAiB,IAAA,SAAAZ,GACAA,EAAAa,aAAA,UAAAb,EAAAc,gBAAA,UAIA,IAAAC,GAAArF,KAAA+D,UAAAoB,aAAA,QACAE,KAAAC,QAAA,oBACAtF,KAAA+D,UAAAa,MAAAS,YAGAE,QAvFA,WAuFA,GAAAC,GAAAxF,IACAA,MAAAiD,OAAA,GAAApB,GAAA4D,EAAA,IAAAzF,KAAA0C,IAGA1C,KAAAiD,OAAAyC,aAAAC,SAAA,SAAAtC,GACAmC,EAAAlC,MAAA,QAAAD,GACAmC,EAAAlC,MAAA,cAAAkC,EAAAvC,OAAAG,IAAAG,SAIAzC,OAAA8E,KAAA5F,KAAAsC,SAAA4C,IAAA,SAAA5D,GACAkE,EAAAvC,OAAAyC,aAAApE,GAAAkE,EAAAlD,QAAAhB,KAIAtB,KAAAiD,OAAA4C,SAEA7F,KAAA4C,aAAA5C,KAAAiD,OAAAG,IAAAC,KAAArD,KAAA4C,aAEA5C,KAAA0E,WACA1E,KAAA8E,WAGA9E,KAAAsC,QAAAwD,OAAA9F,KAAAsC,QAAAwD,MAAAC,SAAA,eACA/F,KAAAgG,iBAIAhG,KAAAsC,QAAAwD,OAAA9F,KAAAsC,QAAAwD,MAAAC,SAAA,gBACA/F,KAAAiG,kBAIAjG,KAAAsC,QAAAwD,OAAA9F,KAAAsC,QAAAwD,MAAAC,SAAA,aACA/F,KAAAkG,eAIAlG,KAAAsC,QAAAwD,OAAA9F,KAAAsC,QAAAwD,MAAAC,SAAA,eACA/F,KAAAmG,iBAIAnG,KAAAsC,QAAAwD,OAAA9F,KAAAsC,QAAAwD,MAAAC,SAAA,eACA/F,KAAAoG,iBAGApG,KAAAiD,OAAAO,UAAAC,KAAA,mBAAAzD,KAAA8C,aFoGM,SAAUlD,EAAQ+B,EAAqBzB,GAE7C,YGxPAY,QAAAC,eAAAY,EAAA,cAAAkB,OAAA,OAAAwD,GAAAnG,EAAA,EAGAoG,KAAcC,QAAU,SAAUC,GAChCA,EAAIC,UAAUH,IAAc3F,KAAM2F,MAEd,mBAAXI,SAA0BA,OAAOF,KAC1CE,OAAOF,IAAIG,IAAIL,KAGFA,YAAf,GH+PM,SAAU1G,EAAQ+B,EAAqBzB,GAE7C,YI3QA,IAAA0G,GAAA1G,EAAA,GAAA2G,EAAA3G,EAAA,IAAA4G,EAAyB5G,EAAQ,GAcjC6G,EAAAD,EACEF,EAAA,EACAC,EAAA,GATF,EAEA,KAEA,KAEA,KAUelF,GAAA,EAAAoF,EAAiB,SJoR1B,SAAUnH,EAAQD,GKrSxBC,EAAAD,QAAA,SACAqH,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAAC,GACAC,EAAAP,QAGAzE,QAAAyE,GAAAxE,OACA,YAAAD,GAAA,aAAAA,IACA+E,EAAAN,EACAO,EAAAP,EAAAxE,QAIA,IAAAF,GAAA,kBAAAiF,GACAA,EAAAjF,QACAiF,CAGAN,KACA3E,EAAAkF,OAAAP,EAAAO,OACAlF,EAAAmF,gBAAAR,EAAAQ,gBACAnF,EAAAoF,WAAA,GAIAR,IACA5E,EAAAqF,YAAA,GAIAP,IACA9E,EAAAsF,SAAAR,EAGA,IAAAS,EA4BA,IA3BAR,GACAQ,EAAA,SAAAC,GAEAA,EACAA,GACA9H,KAAA+H,QAAA/H,KAAA+H,OAAAC,YACAhI,KAAAiI,QAAAjI,KAAAiI,OAAAF,QAAA/H,KAAAiI,OAAAF,OAAAC,WAEAF,GAAA,mBAAAI,uBACAJ,EAAAI,qBAGAf,GACAA,EAAA5G,KAAAP,KAAA8H,GAGAA,KAAAK,uBACAL,EAAAK,sBAAAC,IAAAf,IAKA/E,EAAA+F,aAAAR,GACGV,IACHU,EAAAV,GAGAU,EAAA,CACA,GAAAF,GAAArF,EAAAqF,WACAW,EAAAX,EACArF,EAAAkF,OACAlF,EAAAiG,YAEAZ,IAQArF,EAAAkG,cAAAX,EAEAvF,EAAAkF,OAAA,SAAAiB,EAAAX,GAEA,MADAD,GAAAtH,KAAAuH,GACAQ,EAAAG,EAAAX,KAVAxF,EAAAiG,aAAAD,KACAI,OAAAJ,EAAAT,IACAA,GAaA,OACAP,WACA3H,QAAA4H,EACAjF,aLoTM,SAAU1C,EAAQD,EAASO,IMxZjC,SAAAyI,EAAAjJ,GAC6DE,EAAAD,QAAAD,KAG5DM,EAAA,WAAqB,YAoDtB,SAAA4I,GAAAvF,GACA,GAAAwF,OAAA,EAGA,OAFAA,GAAAjF,SAAAW,cAAA,OACAsE,EAAApE,UAAApB,EACAwF,EAAAC,SAIA,QAAAC,GAAAC,GACA,QAAAA,IAGAA,YAAAC,iBAAAD,YAAAE,WAOA,QAAAhF,GAAA8E,GACA,GAAAG,GAAAvF,SAAAM,iBAAA8E,EACA,OAAAD,GAAAI,GACAA,GAEAA,GAQA,QAAAC,GAAAJ,GACA,GAAAA,EAAA,CAKA,GAAAA,YAAAI,GACA,MAAAJ,EAGAhJ,MAAAgJ,UACA,IAAAK,GAAAL,EAAAK,SAGAC,IACA,KAAAD,EAEAC,GAAAN,GACK,IAAAK,EAELC,GAAAN,GACKD,EAAAC,gBAAAhE,OAELsE,EAAAN,EACK,gBAAAA,KAELA,IAAA1D,QAAA,aAAAiE,OAGAD,EAFA,IAAAN,EAAAQ,QAAA,KAEAZ,EAAAI,GAGA9E,EAAA8E,GAIA,IAAAjE,GAAAuE,EAAAvE,MACA,KAAAA,EAEA,MAAA/E,KAIA,IAAAK,OAAA,EACA,KAAAA,EAAA,EAAeA,EAAA0E,EAAY1E,IAC3BL,KAAAK,GAAAiJ,EAAAjJ,EAEAL,MAAA+E,UAuYA,QAAA0E,GAAAT,GACA,UAAAI,GAAAJ,GAyNA,QAAAU,GAAAC,EAAAC,GACA,GAAAC,OAAA,EAEA,KAAAA,IAAAF,GACA,GAAAA,EAAAnI,eAAAqI,KAEA,IADAD,EAAArJ,KAAAoJ,EAAAE,EAAAF,EAAAE,IAEA,MAOA,QAAAC,GAAAC,EAAAH,GACA,GAAAvJ,OAAA,GACA2J,MAAA,GAEAjF,EAAAgF,EAAAhF,QAAA,CACA,KAAA1E,EAAA,EAAeA,EAAA0E,IACfiF,EAAAD,EAAA1J,IAEA,IADAuJ,EAAArJ,KAAAwJ,EAAAC,EAAA3J,IAF2BA,MAU3B,QAAA4J,GAAAC,GACA,MAAAA,GAAAC,KAAAC,SAAAC,WAAAC,MAAA,GAIA,QAAAC,GAAAlH,GACA,aAAAA,EACA,GAEAA,EAAAiC,QAAA,cAAoCA,QAAA,cAAuBA,QAAA,gBAAyBA,QAAA,yBAOpF,QAAAkF,GAAAZ,GACA,wBAAAA,GAOA,QAAAa,GAAAxH,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,qFACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EAuEA,QAAAC,GAAAC,EAAAC,GACA,GAAAtF,GAAAxF,KAGAiD,EAAA4H,EAAA5H,MACAjD,MAAA6K,OACA7K,KAAA8K,KAEA,IAAAC,GAAAtB,EAAA,oCAGAuB,EAAAF,EAAAE,OACAC,MAAA,EACAD,KAEAC,EAAAD,EAAA3H,OACA4H,EAAAC,EAAAjI,EAAAgI,GACAD,EAAA3H,KAAA4H,GAEAD,EAAAG,SAAA,gBACAJ,EAAAK,OAAAJ,GAGA,IAAAK,GAAAP,EAAAO,SACA9I,EAAAuI,EAAAvI,MAAA,OACA+I,EAAAR,EAAAQ,SAAAC,EAGAC,EAAA/B,EAAA,wBAAAlH,EAAA,kCACAwI,GAAAK,OAAAI,GACAH,EAAAI,QAAA,SAAAzB,GACA,GAAAU,GAAAV,EAAAU,MAGAgB,EAAAhB,EAAArH,MACAqI,GAAAR,EAAAjI,EAAAyI,GACAhB,EAAArH,KAAAqI,EAEA,IAAA7I,GAAAmH,EAAAnH,MACA8I,EAAAlC,EAAA,6BACAiB,KACAiB,EAAAP,OAAAV,GACAc,EAAAJ,OAAAO,GACAA,EAAAC,GAAA,iBAAAC,GACAP,EAAAzI,GAGA2C,EAAAsG,cAAAC,WAAA,WACAvG,EAAAwG,QACiB,QAMjBjB,EAAAa,GAAA,sBAAAC,GACArG,EAAAsG,cAAAC,WAAA,WACAvG,EAAAwG,QACS,KAIThM,KAAA+K,aAGA/K,KAAAiM,WAAA,EACAjM,KAAAkM,OAAA,EA2DA,QAAAC,GAAAlJ,GACA,GAAAuC,GAAAxF,IAEAA,MAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,+DACAzJ,KAAAuC,KAAA,WAGAvC,KAAA2K,SAAA,EAGA3K,KAAAoM,SAAA,GAAAxB,GAAA5K,MACA2E,MAAA,IACAqG,OAAAvB,EAAA,eACAlH,KAAA,OACA8I,OAAgBX,MAAAjB,EAAA,eAAA5G,MAAA,SAA4C6H,MAAAjB,EAAA,eAAA5G,MAAA,SAA4C6H,MAAAjB,EAAA,eAAA5G,MAAA,SAA4C6H,MAAAjB,EAAA,eAAA5G,MAAA,SAA4C6H,MAAAjB,EAAA,eAAA5G,MAAA,SAA4C6H,MAAAjB,EAAA,aAAA5G,MAAA,QAC5OyI,QAAA,SAAAzI,GAEA2C,EAAA6G,SAAAxJ,MA4CA,QAAAyJ,GAAArJ,GACA,GAAAuC,GAAAxF,IAEAA,MAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,mEACAzJ,KAAAuC,KAAA,WAGAvC,KAAA2K,SAAA,EAGA3K,KAAAoM,SAAA,GAAAxB,GAAA5K,MACA2E,MAAA,IACAqG,OAAAvB,EAAA,aACAlH,KAAA,OACA8I,OAAgBX,MAAAjB,EAAA,oDAA2C5G,MAAA,MAAmC6H,MAAAjB,EAAA,gDAAyC5G,MAAA,MAAiC6H,MAAAjB,EAAA,uBAAA5G,MAAA,MAAiD6H,MAAAjB,EAAA,gDAAyC5G,MAAA,MAAiC6H,MAAAjB,EAAA,oDAA2C5G,MAAA,MAAmC6H,MAAAjB,EAAA,sDAA4C5G,MAAA,MAC7ZyI,QAAA,SAAAzI,GAEA2C,EAAA6G,SAAAxJ,MAqBA,QAAA0J,GAAAtJ,GACA,GAAAuC,GAAAxF,IAEAA,MAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,6DACAzJ,KAAAuC,KAAA,WAGAvC,KAAA2K,SAAA,CAGA,IAAA6B,GAAAvJ,EAAAuJ,OACAC,EAAAD,EAAAC,aAGAzM,MAAAoM,SAAA,GAAAxB,GAAA5K,MACA2E,MAAA,IACAqG,OAAAvB,EAAA,aACAlH,KAAA,OACA8I,KAAAoB,EAAAvH,IAAA,SAAAwH,GACA,OAAoBhC,MAAAjB,EAAA,6BAAAiD,EAAA,MAAsDA,EAAA,WAAA7J,MAAA6J,KAE1EpB,QAAA,SAAAzI,GAEA2C,EAAA6G,SAAAxJ,MAyBA,QAAA8J,GAAA9B,EAAAC,GACA9K,KAAA6K,OACA7K,KAAA8K,MAyLA,QAAA8B,GAAA3J,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,6DACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EAsJA,QAAAkC,GAAA5J,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,uFACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EA+CA,QAAAmC,GAAA7J,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,qFACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EAsBA,QAAAoC,GAAA9J,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,8FACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EA+CA,QAAAqC,GAAA/J,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,0FACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EA+CA,QAAAsC,GAAAhK,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,qFACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EAsBA,QAAAuC,GAAAjK,GACA,GAAAuC,GAAAxF,IAEAA,MAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,8DACAzJ,KAAAuC,KAAA,WAGAvC,KAAA2K,SAAA,EAGA3K,KAAAoM,SAAA,GAAAxB,GAAA5K,MACA2E,MAAA,IACAqG,OAAAvB,EAAA,eACAlH,KAAA,OACA8I,OAAgBX,MAAAjB,EAAA,4DAAA5G,MAAA,sBAAsG6H,MAAAjB,EAAA,oDAAA5G,MAAA,wBACtHyI,QAAA,SAAAzI,GAEA2C,EAAA6G,SAAAxJ,MA2DA,QAAAsK,GAAAlK,GACA,GAAAuC,GAAAxF,IAEAA,MAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,uEACAzJ,KAAAuC,KAAA,WAGAvC,KAAA2K,SAAA,EAGA3K,KAAAoM,SAAA,GAAAxB,GAAA5K,MACA2E,MAAA,IACAqG,OAAAvB,EAAA,eACAlH,KAAA,OACA8I,OAAgBX,MAAAjB,EAAA,2DAAA5G,MAAA,gBAA+F6H,MAAAjB,EAAA,6DAAA5G,MAAA,kBAAmG6H,MAAAjB,EAAA,4DAAA5G,MAAA,iBAClNyI,QAAA,SAAAzI,GAEA2C,EAAA6G,SAAAxJ,MAoBA,QAAAuK,GAAAnK,GACA,GAAAuC,GAAAxF,IAEAA,MAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,gEACAzJ,KAAAuC,KAAA,UAGA,IAAAiK,GAAAvJ,EAAAuJ,OACAa,EAAAb,EAAAa,UAGArN,MAAA2K,SAAA,EAGA3K,KAAAoM,SAAA,GAAAxB,GAAA5K,MACA2E,MAAA,IACAqG,OAAAvB,EAAA,eACAlH,KAAA,eACA8I,KAAAgC,EAAAnI,IAAA,SAAAoI,GACA,OAAoB5C,MAAAjB,EAAA,mBAAA6D,EAAA,oCAAyCzK,MAAAyK,KAE7DhC,QAAA,SAAAzI,GAEA2C,EAAA6G,SAAAxJ,MAoBA,QAAA0K,GAAAtK,GACA,GAAAuC,GAAAxF,IAEAA,MAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,oEACAzJ,KAAAuC,KAAA,UAGA,IAAAiK,GAAAvJ,EAAAuJ,OACAa,EAAAb,EAAAa,UAGArN,MAAA2K,SAAA,EAGA3K,KAAAoM,SAAA,GAAAxB,GAAA5K,MACA2E,MAAA,IACAqG,OAAAvB,EAAA,cACAlH,KAAA,eACA8I,KAAAgC,EAAAnI,IAAA,SAAAoI,GACA,OAAoB5C,MAAAjB,EAAA,mBAAA6D,EAAA,wCAAyCzK,MAAAyK,KAE7DhC,QAAA,SAAAzI,GAEA2C,EAAA6G,SAAAxJ,MAoBA,QAAA2K,GAAAvK,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,4FACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EA8DA,QAAA8C,GAAAxK,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,yFACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EAiIA,QAAA+C,GAAAzK,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,sFACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EAqGA,QAAAgD,GAAA1K,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,+DACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EAmVA,QAAAiD,GAAA3K,GACAjD,KAAAiD,SACAjD,KAAA0K,MAAAjB,EAAA,6DACAzJ,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EAqEA,QAAAkD,GAAA5K,GACAjD,KAAAiD,QACA,IAAA6K,GAAA7D,EAAA,UACAjK,MAAA0K,MAAAjB,EAAA,6BAAAqE,EAAA,0CACA7K,EAAA6K,YACA9N,KAAAuC,KAAA,QAGAvC,KAAA2K,SAAA,EA2PA,QAAAoD,GAAA9K,GACAjD,KAAAiD,SACAjD,KAAA8F,SA0HA,QAAAkI,GAAAnC,GACA,GAAAoC,GAAApC,EAAAoC,eAAApC,EAAAqC,eAAArC,EAAAqC,cAAAD,cACAE,MAAA,EAOA,OALAA,GADA,MAAAF,EACAvH,OAAAuH,eAAAvH,OAAAuH,cAAAG,QAAA,QAEAH,EAAAG,QAAA,cAGA7D,EAAA4D,GAIA,QAAAE,GAAAxC,EAAAyC,EAAAC,GACA,GAAAN,GAAApC,EAAAoC,eAAApC,EAAAqC,eAAArC,EAAAqC,cAAAD,cACAE,MAAA,GACAK,MAAA,EAUA,IATA,MAAAP,EACAE,EAAAzH,OAAAuH,eAAAvH,OAAAuH,cAAAG,QAAA,SAEAD,EAAAF,EAAAG,QAAA,cACAI,EAAAP,EAAAG,QAAA,eAEAI,GAAAL,IACAK,EAAA,MAAAjE,EAAA4D,GAAA,QAEAK,EAAA,CAKA,GAAAC,GAAAD,EAAAE,MAAA,UAyBA,OAxBA,KAAAD,EAAA1J,SACAyJ,EAAAC,EAAA,IAIAD,IAAAlJ,QAAA,iCAEAkJ,IAAAlJ,QAAA,mBAEAkJ,IAAAlJ,QAAA,mCAEAiJ,IAEAC,IAAAlJ,QAAA,mBAKAkJ,EAFAF,EAEAE,EAAAlJ,QAAA,wCAGAkJ,EAAAlJ,QAAA,iCAOA,QAAAqJ,GAAA9C,GACA,GAAA1C,KAEA,IADA6E,EAAAnC,GAGA,MAAA1C,EAGA,IAAA8E,GAAApC,EAAAoC,eAAApC,EAAAqC,eAAArC,EAAAqC,cAAAD,kBACAW,EAAAX,EAAAW,KACA,OAAAA,IAIAlF,EAAAkF,EAAA,SAAA/E,EAAAhH,GAEA,SAAAgM,KADAhM,EAAAN,OAEA4G,EAAA2F,KAAAjM,EAAAkM,eAIA5F,GAVAA,EAkBA,QAAA6F,GAAAtE,GACA,GAAAvB,KAoCA,QAnCAuB,EAAAuE,kBACAxD,QAAA,SAAAyD,GACA,GAAAC,OAAA,GACA9F,EAAA6F,EAAA7F,QASA,IANA,IAAAA,IACA8F,EAAAD,EAAAE,YACAD,EAAA5E,EAAA4E,IAIA,IAAA9F,EAAA,CACA8F,KAGAA,EAAAE,IAAAH,EAAAI,SAAAC,aAKA,QAHAC,MACAC,EAAAP,EAAAQ,eACAC,EAAAF,EAAA1K,QAAA,EACA1E,EAAA,EAA2BA,EAAAsP,EAAoBtP,IAAA,CAC/C,GAAAoD,GAAAgM,EAAApP,EACAmP,GAAAV,MACAnO,KAAA8C,EAAA9C,KACAkC,MAAAY,EAAAZ,QAGAsM,EAAAS,MAAAJ,EAEAL,EAAArG,SAAAkG,EAAAvF,EAAAyF,IAGA/F,EAAA2F,KAAAK,KAEAhG,EAIA,QAAA0G,GAAA5M,GACAjD,KAAAiD,SAwfA,QAAA6M,GAAA7M,GACAjD,KAAAiD,SAqGA,QAAA8M,GAAA9M,GACAjD,KAAAiD,SACAjD,KAAAgQ,cAAA,KAmLA,QAAAC,GAAAhN,GACAjD,KAAAiD,SACAjD,KAAAkQ,MAAA,EACAlQ,KAAAmQ,SAAA,EACAnQ,KAAAoQ,WAAA,EACApQ,KAAAqQ,WAAA,EACArQ,KAAAsQ,eAAArN,EAAAsN,mBACAvQ,KAAAwQ,KAAA/G,EAAA,oCAgEA,QAAAgH,GAAAxN,GACAjD,KAAAiD,SA8TA,QAAAyN,GAAAC,EAAAC,GACA,SAAAD,EAEA,SAAAE,OAAA,2BAGA7Q,MAAA0C,GAAA,cAAAoO,IAEA9Q,KAAA2Q,kBACA3Q,KAAA4Q,eAGA5Q,KAAA0F,gBA7uIA,GA2EAqL,KAsDA3H,GAAA7H,WACAyP,YAAA5H,EAGAqC,QAAA,SAAA7B,GACA,GAAAvJ,OAAA,EACA,KAAAA,EAAA,EAAmBA,EAAAL,KAAA+E,OAAiB1E,IAAA,CACpC,GAAA4Q,GAAAjR,KAAAK,EAEA,SADAuJ,EAAArJ,KAAA0Q,IAAA5Q,GAEA,MAGA,MAAAL,OAIAkR,MAAA,SAAAC,GACA,GAAAC,KAIA,OAHApR,MAAAyL,QAAA,SAAAwF,GACAG,EAAAtC,KAAAmC,EAAAI,YAAAF,MAEA1H,EAAA2H,IAIAlQ,IAAA,SAAAoQ,GACA,GAAAvM,GAAA/E,KAAA+E,MAIA,OAHAuM,IAAAvM,IACAuM,GAAAvM,GAEA0E,EAAAzJ,KAAAsR,KAIAC,MAAA,WACA,MAAAvR,MAAAkB,IAAA,IAIAsQ,KAAA,WACA,GAAAzM,GAAA/E,KAAA+E,MACA,OAAA/E,MAAAkB,IAAA6D,EAAA,IAIA6G,GAAA,SAAArJ,EAAAyG,EAAAY,GAEAA,IACAA,EAAAZ,EACAA,EAAA,KAIA,IAAAyI,KAGA,OAFAA,GAAAlP,EAAAmM,MAAA,OAEA1O,KAAAyL,QAAA,SAAAwF,GACAQ,EAAAhG,QAAA,SAAAlJ,GACA,GAAAA,EAAA,CAWA,GANAwO,EAAAjC,MACAmC,OACA1O,OACAqH,QAGAZ,EAGA,WADAiI,GAAAS,iBAAAnP,EAAAqH,EAKAqH,GAAAS,iBAAAnP,EAAA,SAAAsJ,GACA,GAAA8F,GAAA9F,EAAA8F,MACAA,GAAAC,QAAA5I,IACAY,EAAArJ,KAAAoR,EAAA9F,WAQAgG,IAAA,SAAAtP,EAAAqH,GACA,MAAA5J,MAAAyL,QAAA,SAAAwF,GACAA,EAAAa,oBAAAvP,EAAAqH,MAKAnG,KAAA,SAAAoG,EAAA1G,GACA,aAAAA,EAEAnD,KAAA,GAAAmF,aAAA0E,GAGA7J,KAAAyL,QAAA,SAAAwF,GACAA,EAAAc,aAAAlI,EAAA1G,MAMAgI,SAAA,SAAA3G,GACA,MAAAA,GAGAxE,KAAAyL,QAAA,SAAAwF,GACA,GAAAe,OAAA,EACAf,GAAAzM,WAEAwN,EAAAf,EAAAzM,UAAAkK,MAAA,MACAsD,IAAAC,OAAA,SAAAjI,GACA,QAAAA,EAAAT,SAGAyI,EAAAxI,QAAAhF,GAAA,GACAwN,EAAAlD,KAAAtK,GAGAyM,EAAAzM,UAAAwN,EAAAE,KAAA,MAEAjB,EAAAzM,cAjBAxE,MAuBAmS,YAAA,SAAA3N,GACA,MAAAA,GAGAxE,KAAAyL,QAAA,SAAAwF,GACA,GAAAe,OAAA,EACAf,GAAAzM,YAEAwN,EAAAf,EAAAzM,UAAAkK,MAAA,MACAsD,IAAAC,OAAA,SAAAjI,GAGA,UAFAA,IAAAT,SAEAS,IAAAxF,KAMAyM,EAAAzM,UAAAwN,EAAAE,KAAA,QAhBAlS,MAsBAoS,IAAA,SAAAvI,EAAA1G,GACA,GAAAkP,GAAAxI,EAAA,IAAA1G,EAAA,GACA,OAAAnD,MAAAyL,QAAA,SAAAwF,GACA,GAAArM,IAAAqM,EAAA9L,aAAA,cAAAoE,OACA+I,MAAA,GACAC,IACA3N,IAEA0N,EAAA1N,EAAA8J,MAAA,KACA4D,EAAA7G,QAAA,SAAAzB,GAEA,GAAAgI,GAAAhI,EAAA0E,MAAA,KAAAxJ,IAAA,SAAA7E,GACA,MAAAA,GAAAkJ,QAEA,KAAAyI,EAAAjN,QACAwN,EAAAzD,KAAAkD,EAAA,OAAAA,EAAA,MAIAO,IAAArN,IAAA,SAAA8E,GACA,WAAAA,EAAAR,QAAAK,GACAwI,EAEArI,IAGAuI,EAAA/I,QAAA6I,GAAA,GACAE,EAAAzD,KAAAuD,GAGApB,EAAAc,aAAA,QAAAQ,EAAAL,KAAA,QAGAjB,EAAAc,aAAA,QAAAM,MAMAG,KAAA,WACA,MAAAxS,MAAAoS,IAAA,oBAIApG,KAAA,WACA,MAAAhM,MAAAoS,IAAA,mBAIAtJ,SAAA,WACA,GAAAmI,GAAAjR,KAAA,EACA,OAAAiR,GAIAxH,EAAAwH,EAAAnI,UAHA,MAOAmG,WAAA,WACA,GAAAgC,GAAAjR,KAAA,EACA,OAAAiR,GAIAxH,EAAAwH,EAAAhC,YAHA,MAOA7D,OAAA,SAAAqH,GACA,MAAAzS,MAAAyL,QAAA,SAAAwF,GACAwB,EAAAhH,QAAA,SAAAiH,GACAzB,EAAA0B,YAAAD,QAMAE,OAAA,WACA,MAAA5S,MAAAyL,QAAA,SAAAwF,GACA,GAAAA,EAAA2B,OACA3B,EAAA2B,aACa,CACb,GAAA3K,GAAAgJ,EAAA4B,aACA5K,MAAA6K,YAAA7B,OAMA8B,UAAA,SAAAC,GACA,GAAA/B,GAAAjR,KAAA,GACA0S,EAAAM,EAAA,EACA,OAAA/B,GAAAgC,SAAAP,IAIAQ,YAAA,WAEA,MADAlT,MAAA,GACAmT,yBAIAC,YAAA,WAEA,MADApT,MAAA,GACAsP,UAIA+D,KAAA,SAAArK,GAEA,MAAAS,GADAzJ,KAAA,GACAkE,iBAAA8E,KAIAzF,KAAA,SAAAJ,GACA,MAAAA,GAQAnD,KAAAyL,QAAA,SAAAwF,GACAA,EAAAxM,UAAAtB,IAPAnD,KAAA,GACAyE,UAAAa,QAAA,oBACA,YAWAjC,KAAA,SAAAR,GACA,GAAAoO,GAAAjR,KAAA,EACA,cAAA6C,EACAoO,EAAAxM,WAEAwM,EAAAxM,UAAA5B,EACA7C,OAKAmD,IAAA,WAEA,MADAnD,MAAA,GACA6C,MAAA0G,QAIA+J,MAAA,WACA,MAAAtT,MAAAyL,QAAA,SAAAwF,GACAA,EAAAqC,WAKArL,OAAA,WAEA,MAAAwB,GADAzJ,KAAA,GACA6S,gBAIAU,YAAA,SAAAvK,EAAAwK,GACA,GAAAC,GAAA7P,SAAAM,iBAAA8E,GACAjE,EAAA0O,EAAA1O,MACA,KAAAA,EAEA,WAGA,IAAAkM,GAAAuC,GAAAxT,KAAA,EACA,aAAAiR,EAAA3B,SACA,WAGA,IAAArH,GAAAgJ,EAAA4B,cACAxS,MAAA,EACA,KAAAA,EAAA,EAAmBA,EAAA0E,EAAY1E,IAC/B,GAAA4H,IAAAwL,EAAApT,GAEA,MAAAoJ,GAAAxB,EAKA,OAAAjI,MAAAuT,YAAAvK,EAAAf,IAIAyL,MAAA,SAAAhJ,GACA,WAAAA,EAAArB,SACArJ,KAAA,KAAA0K,EAEA1K,KAAA,KAAA0K,EAAA,IAKAiJ,aAAA,SAAA3K,GACA,GAAA4K,GAAAnK,EAAAT,GACA6K,EAAAD,EAAA,EACA,OAAAC,GAGA7T,KAAAyL,QAAA,SAAAwF,GACA4C,EAAAC,WACAH,aAAA1C,EAAA4C,KAJA7T,MASA+T,YAAA,SAAA/K,GACA,GAAA4K,GAAAnK,EAAAT,GACA6K,EAAAD,EAAA,EACA,OAAAC,GAGA7T,KAAAyL,QAAA,SAAAwF,GACA,GAAAhJ,GAAA4L,EAAAC,UACA7L,GAAA+L,YAAAH,EAEA5L,EAAA0K,YAAA1B,GAGAhJ,EAAA0L,aAAA1C,EAAA4C,EAAAI,eATAjU,OAqBAyJ,EAAAyK,OAAA,WACAnD,EAAAtF,QAAA,SAAAzB,GACA,GAAAiH,GAAAjH,EAAAiH,KACA1O,EAAAyH,EAAAzH,KACAqH,EAAAI,EAAAJ,EAEAqH,GAAAa,oBAAAvP,EAAAqH,KAQA,IAAA4C,IAGA1G,OAAA,0LAEA2G,WAAA,wCAEAY,QAAA,qGAaA8G,WAEAC,MAAA,KAEA7R,KAAA,QAEA8R,UACAC,IAAA,OACAC,IAAA,yFAEAD,IAAA,OACAC,IAAA,qFAEAD,IAAA,MACAC,IAAA,qFAIAH,MAAA,KAEA7R,KAAA,QAEA8R,UACAE,IAAA,uFACAD,IAAA,UAEAC,IAAA,qFACAD,IAAA,SAEAC,IAAA,oFACAD,IAAA,WAIAF,MAAA,QAEA7R,KAAA,QAEA8R,QAAA,2DAAA3F,MAAA,QAIA8F,OAAA,IAGAC,OAAA,EAGAC,UAAA,SAAAnR,EAAAoR,GAGA,UAKAC,aAAA,SAAAL,GAEA,UAKAM,kBAAA,EAGAC,gBAAA,EAIAC,gBAAA,SAAAV,GAEA,MAAAA,IAUAW,aAAA,EAGAC,gBAAA,SAAAC,KAKAC,iBAAA,QAMAC,qBAAA,EAMAC,eAAA,GAGAC,mBAKAC,oBAKAC,iBAAA,EAGAC,iBAAA,IAGAC,gBASAC,OAAA,SAAAC,EAAA3S,EAAA4S,KASAC,QAAA,SAAAF,EAAA3S,EAAAkG,KAGA4M,KAAA,SAAAH,EAAA3S,EAAAkG,KAGA6M,MAAA,SAAAJ,EAAA3S,KAGAgT,QAAA,SAAAL,EAAA3S,MAMAiT,OAAA,GASAC,GACAC,IAAAC,UAAAC,UAGAC,SAAA,WAEA,MADA,UACA1H,KAAA7O,KAAAoW,MAIAI,KAAA,WACA,uBAAA9P,SAoEA+D,GAAAlJ,WACAyP,YAAAvG,EAGAa,QAAA,SAAAO,GAGA,GAAA5I,GAAAjD,KAAAiD,OACAwT,EAAAxT,EAAAyT,UAAAC,kBAEAF,IAEAxT,EAAAyT,UAAAE,mBAIA3T,EAAA4T,IAAAC,GAAA,QAEAL,IAEAxT,EAAAyT,UAAAK,gBACA9T,EAAAyT,UAAAM,qBAKAC,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,KACAzH,GAAA4T,IAAAK,kBAAA,SACAlX,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,gBASA,IAAAjH,GAAA,SAAAjI,EAAAkU,GACA,GAAAC,GAAAnU,EAAAuJ,OAAA4K,aACAjO,EAAAgO,CAaA,OAXAC,GAAA3L,QAAA,SAAAzB,GACA,GAAAqN,GAAArN,EAAAqN,IACAlU,EAAA6G,EAAA7G,GAEAkU,GAAAxI,KAAA1F,KACAA,IAAA7D,QAAA+R,EAAA,WACA,MAAAlU,QAKAgG,GAMAoC,EAAA,YAyEAX,GAAArJ,WACAyP,YAAApG,EAGA4H,KAAA,WACAxS,KAAA8L,eAEAwL,aAAAtX,KAAA8L,cAGA,IAAAjB,GAAA7K,KAAA6K,KACA0M,EAAA1M,EAAAH,MACAK,EAAA/K,KAAA+K,UACA,KAAA/K,KAAAkM,MAAA,CAGA,GAAAlM,KAAAiM,UAEAlB,EAAAyH,WACS,CAET,GAAAgF,GAAAD,EAAArE,cAAArO,QAAA,EACAF,EAAA3E,KAAA8K,IAAAnG,OAAA,GACAoG,GAAAqH,IAAA,aAAAoF,EAAA,MAAApF,IAAA,QAAAzN,EAAA,MAGA4S,EAAAnM,OAAAL,GACA/K,KAAAiM,WAAA,EAIAjM,KAAAkM,OAAA,IAIAF,KAAA,WACAhM,KAAAyX,eAEAH,aAAAtX,KAAAyX,cAGA,IAAA1M,GAAA/K,KAAA+K,UACA/K,MAAAkM,QAIAnB,EAAAiB,OACAhM,KAAAkM,OAAA,KAgCAC,EAAA5K,WACAyP,YAAA7E,EAGAE,SAAA,SAAAxJ,GACA,GAAAI,GAAAjD,KAAAiD,OAEAyU,EAAAzU,EAAAyT,UAAAiB,2BACA1U,GAAAO,UAAAkQ,MAAAgE,IAMAzU,EAAA4T,IAAAC,GAAA,cAAAjU,IAIAoU,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,MACA2M,EAAA,MACAO,EAAA3U,EAAA4T,IAAAgB,kBAAA,cACAR,GAAAxI,KAAA+I,IACA5X,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,iBAkCA7F,EAAA/K,WACAyP,YAAA1E,EAGAD,SAAA,SAAAxJ,GACA7C,KAAAiD,OACA4T,IAAAC,GAAA,WAAAjU,KAuCA0J,EAAAhL,WACAyP,YAAAzE,EAEAF,SAAA,SAAAxJ,GACA7C,KAAAiD,OACA4T,IAAAC,GAAA,WAAAjU,IAQA,IAAAiV,GAAA,aAGAC,IASApL,GAAApL,WACAyP,YAAArE,EAGA6F,KAAA,WACA,GAAAhN,GAAAxF,KAEA6K,EAAA7K,KAAA6K,IACA,MAAAkN,EAAAvO,QAAAqB,IAAA,IAKA,GAAA5H,GAAA4H,EAAA5H,OACA+U,EAAAvO,EAAA,QACA8G,EAAAtN,EAAAsN,mBACAzF,EAAA9K,KAAA8K,IAGAC,EAAAtB,EAAA,2CACA9E,EAAAmG,EAAAnG,OAAA,GACAoG,GAAAqH,IAAA,QAAAzN,EAAA,MAAAyN,IAAA,iBAAAzN,GAAA,OAGA,IAAAsT,GAAAxO,EAAA,iDACAsB,GAAAK,OAAA6M,GACAA,EAAArM,GAAA,mBACApG,EAAAwG,QAIA,IAAAkM,GAAAzO,EAAA,yCACA0O,EAAA1O,EAAA,4CACAsB,GAAAK,OAAA8M,GAAA9M,OAAA+M,EAGA,IAAAtT,GAAAiG,EAAAjG,MACAA,IACAsT,EAAA/F,IAAA,SAAAvN,EAAA,MAAAuN,IAAA,oBAIA,IAAAgG,GAAAtN,EAAAsN,SACAC,KACAC,IACAF,GAAA3M,QAAA,SAAA8M,EAAAC,GACA,GAAAD,EAAA,CAGA,GAAAnE,GAAAmE,EAAAnE,OAAA,GACAqE,EAAAF,EAAAE,KAAA,EAGArE,GAAAlJ,EAAAjI,EAAAmR,GACAqE,EAAAvN,EAAAjI,EAAAwV,EAGA,IAAAzN,GAAAvB,EAAA,wBAAA2K,EAAA,QACA8D,GAAA9M,OAAAJ,EACA,IAAA0N,GAAAjP,EAAAgP,EACAN,GAAA/M,OAAAsN,GAGA1N,EAAA2N,OAAAH,EACAH,EAAAvJ,KAAA9D,GACAsN,EAAAxJ,KAAA4J,GAGA,IAAAF,GACAxN,EAAAL,SAAA,EACAK,EAAAG,SAAA,eAEAuN,EAAA1M,OAIAhB,EAAAY,GAAA,iBAAAC,GACAb,EAAAL,UAIA0N,EAAA5M,QAAA,SAAAT,GACAA,EAAAL,SAAA,EACAK,EAAAmH,YAAA,gBAEAmG,EAAA7M,QAAA,SAAAiN,GACAA,EAAA1M,SAIAhB,EAAAL,SAAA,EACAK,EAAAG,SAAA,cACAuN,EAAAlG,aAKAzH,EAAAa,GAAA,iBAAAC,GAEAA,EAAA+M,oBAEAZ,EAAApM,GAAA,iBAAAC,GACArG,EAAAwG,SAIAuE,EAAAnF,OAAAL,GAGAqN,EAAA3M,QAAA,SAAA8M,EAAAjH,GACA,GAAAiH,EAAA,EAGAA,EAAAM,YACApN,QAAA,SAAAqN,GACA,GAAA9P,GAAA8P,EAAA9P,SACAzG,EAAAuW,EAAAvW,KACAqH,EAAAkP,EAAAlP,IAAAkO,CACAQ,GAAAhH,GACA+B,KAAArK,GAAA4C,GAAArJ,EAAA,SAAAsJ,GACAA,EAAA+M,kBACAhP,EAAAiC,IAGArG,EAAAwG,aAOA,IAAA+M,GAAAhO,EAAAsI,KAAA,4BACA0F,GAAAhU,QACAgU,EAAA7X,IAAA,GAAAoS,QAIAtT,KAAA+K,aAGA/K,KAAAgZ,mBAEAjB,EAAAjJ,KAAAjE,KAIAmB,KAAA,WACA,GAAAnB,GAAA7K,KAAA6K,KACAE,EAAA/K,KAAA+K,UACAA,IACAA,EAAA6H,SAIAmF,IAAA9F,OAAA,SAAAjI,GACA,MAAAA,KAAAa,KASAmO,iBAAA,WACAjB,EAAAhT,QAGAgT,EAAAtM,QAAA,SAAAZ,GACA,GAAAoO,GAAApO,EAAAoO,SACAA,GAAAjN,MACAiN,EAAAjN,WAoBAY,EAAArL,WACAyP,YAAApE,EAGAtB,QAAA,SAAAO,GACA,GAAA5I,GAAAjD,KAAAiD,OACAiW,MAAA,EAEA,IAAAlZ,KAAA2K,QAAA,CAGA,KADAuO,EAAAjW,EAAAyT,UAAAiB,6BAEA,MAGA1U,GAAAyT,UAAAyC,kBAAAD,GACAjW,EAAAyT,UAAAM,mBAEAhX,KAAAoZ,aAAAF,EAAA3V,OAAA2V,EAAAzV,KAAA,aAGAR,GAAAyT,UAAAC,mBAEA3W,KAAAoZ,aAAA,OAGApZ,KAAAoZ,aAAAnW,EAAAyT,UAAA2C,mBAAA,KAMAD,aAAA,SAAA7V,EAAAoR,GACA,GAAAnP,GAAAxF,KAGAsZ,EAAArP,EAAA,cACAsP,EAAAtP,EAAA,cACAuP,EAAAvP,EAAA,UACAwP,EAAAxP,EAAA,WAGAyP,EAAA1Z,KAAA2K,QAAA,sBAGAsO,EAAA,GAAAtM,GAAA3M,MACA2E,MAAA,IAEAyT,OAEAhE,MAAA,KAEAqE,IAAA,iDAAAc,EAAA,sCAAAhW,EAAA,uEAAA+V,EAAA,sCAAA3E,EAAA,kJAAA6E,EAAA,4EAAAC,EAAA,uCAAAC,EAAA,sFAEAb,SAGA7P,SAAA,IAAAwQ,EACAjX,KAAA,QACAqH,GAAA,WAEA,GAAA+P,GAAAlQ,EAAA,IAAA6P,GACAM,EAAAnQ,EAAA,IAAA8P,GACA5E,EAAAgF,EAAAxW,MACAI,EAAAqW,EAAAzW,KAIA,OAHAqC,GAAAqU,YAAAtW,EAAAoR,IAGA,KAKA3L,SAAA,IAAAyQ,EACAlX,KAAA,QACAqH,GAAA,WAKA,MAHApE,GAAAsU,YAGA,QAQAb,GAAAzG,OAGAxS,KAAAiZ,SAIAa,SAAA,WACA,GAAA9Z,KAAA2K,QAAA,CAGA,GAAA1H,GAAAjD,KAAAiD,MAEA,IADAA,EAAAyT,UAAAiB,4BACA,CAGA,GAAAoC,GAAA9W,EAAAyT,UAAA2C,kBACApW,GAAA4T,IAAAC,GAAA,sBAAAiD,EAAA,cAIAF,YAAA,SAAAtW,EAAAoR,GACA,GAAA1R,GAAAjD,KAAAiD,OACAuJ,EAAAvJ,EAAAuJ,OACAkI,EAAAlI,EAAAkI,UACAsF,GAAA,CACAtF,IAAA,kBAAAA,KACAsF,EAAAtF,EAAAnR,EAAAoR,KAEA,IAAAqF,EACA/W,EAAA4T,IAAAC,GAAA,yBAAAnC,EAAA,qBAAApR,EAAA,QAEA0W,MAAAD,IAKA/C,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,MACAwP,EAAAjX,EAAAyT,UAAAiB,2BACAuC,KAGA,MAAAA,EAAA9G,eACApT,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,kBAmBAtF,EAAAtL,WACAyP,YAAAnE,EAGAvB,QAAA,SAAAO,GAGA,GAAA5I,GAAAjD,KAAAiD,OACAwT,EAAAxT,EAAAyT,UAAAC,kBAEAF,IAEAxT,EAAAyT,UAAAE,mBAIA3T,EAAA4T,IAAAC,GAAA,UAEAL,IAEAxT,EAAAyT,UAAAK,gBACA9T,EAAAyT,UAAAM,qBAKAC,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,KACAzH,GAAA4T,IAAAK,kBAAA,WACAlX,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,iBAmBArF,EAAAvL,WACAyP,YAAAlE,EAGAxB,QAAA,SAAAO,GAGA7L,KAAAiD,OAGA4T,IAAAC,GAAA,UAkBA/J,EAAAxL,WACAyP,YAAAjE,EAGAzB,QAAA,SAAAO,GAGA,GAAA5I,GAAAjD,KAAAiD,OACAwT,EAAAxT,EAAAyT,UAAAC,kBAEAF,IAEAxT,EAAAyT,UAAAE,mBAIA3T,EAAA4T,IAAAC,GAAA,iBAEAL,IAEAxT,EAAAyT,UAAAK,gBACA9T,EAAAyT,UAAAM,qBAKAC,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,KACAzH,GAAA4T,IAAAK,kBAAA,kBACAlX,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,iBAmBAnF,EAAAzL,WACAyP,YAAAhE,EAGA1B,QAAA,SAAAO,GAGA,GAAA5I,GAAAjD,KAAAiD,OACAwT,EAAAxT,EAAAyT,UAAAC,kBAEAF,IAEAxT,EAAAyT,UAAAE,mBAIA3T,EAAA4T,IAAAC,GAAA,aAEAL,IAEAxT,EAAAyT,UAAAK,gBACA9T,EAAAyT,UAAAM,qBAKAC,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,KACAzH,GAAA4T,IAAAK,kBAAA,cACAlX,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,iBAmBAlF,EAAA1L,WACAyP,YAAA/D,EAGA3B,QAAA,SAAAO,GAGA7L,KAAAiD,OAGA4T,IAAAC,GAAA,UAgCA5J,EAAA3L,WACAyP,YAAA9D,EAGAb,SAAA,SAAAxJ,GACA,GAAAI,GAAAjD,KAAAiD,OACAO,EAAAP,EAAAO,SAEA,IADAP,EAAAyT,UAAAM,oBACA/T,EAAA4T,IAAAK,kBAAArU,GAAA,CAGAI,EAAA4T,IAAAC,GAAAjU,EAGA,IAAA6U,GAAAzU,EAAAyT,UAAAiB,2BAIA,IAHA,OAAAD,EAAAtE,gBACAsE,IAAAzP,WAEA,eAAA4G,KAAA6I,EAAAtE,iBAGAsE,EAAAhE,MAAAlQ,GAAA,CAIA,GAAA2W,GAAAzC,EAAAzP,QACAkS,GAAAzG,MAAAlQ,KAKAkU,EAAA3D,YAAAoG,GACAA,EAAAvH,aAIAqE,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,KACAzH,GAAA4T,IAAAK,kBAAA,wBAAAjU,EAAA4T,IAAAK,kBAAA,sBACAlX,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,iBAiCAhF,EAAA5L,WACAyP,YAAA7D,EAGAd,SAAA,SAAAxJ,GACA7C,KAAAiD,OACA4T,IAAAC,GAAAjU,KAsCAuK,EAAA7L,WACAyP,YAAA5D,EAGAf,SAAA,SAAAxJ,GACA7C,KAAAiD,OACA4T,IAAAC,GAAA,YAAAjU,KAsCA0K,EAAAhM,WACAyP,YAAAzD,EAGAlB,SAAA,SAAAxJ,GACA7C,KAAAiD,OACA4T,IAAAC,GAAA,YAAAjU,KAkBA2K,EAAAjM,WACAyP,YAAAxD,EAEAlC,QAAA,SAAAO,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyU,EAAAzU,EAAAyT,UAAAiB,4BACArI,EAAAoI,EAAAtE,aAEA,KAAA+C,EAAAK,OAQA,YAPA,eAAAlH,EAEArM,EAAA4T,IAAAC,GAAA,qBAGA7T,EAAA4T,IAAAC,GAAA,8BAMA,IAAAzC,OAAA,GACA+F,MAAA,EACA,UAAA9K,EAMA,MAJA+E,GAAAqD,EAAAnU,OACA6W,EAAA3Q,EAAA,eAAA4K,EAAA,iBACA+F,EAAArG,YAAA2D,OACAA,GAAA9E,QAGA,gBAAAtD,IAEA+E,EAAAqD,EAAAnU,OACA6W,EAAA3Q,EAAA,MAAA4K,EAAA,QACA+F,EAAArG,YAAA2D,GACAA,EAAA9E,WAIAqE,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,MACA2M,EAAA,gBACAO,EAAA3U,EAAA4T,IAAAgB,kBAAA,cACAR,GAAAxI,KAAA+I,IACA5X,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,iBAmBA1E,EAAAlM,WACAyP,YAAAvD,EAEAnC,QAAA,SAAAO,GACA,GAAA5I,GAAAjD,KAAAiD,OACAoX,EAAApX,EAAAyT,UAAA4D,wBACAC,EAAAtX,EAAAyT,UAAA8D,sBACA/D,EAAAxT,EAAAyT,UAAAC,mBACAoD,EAAA9W,EAAAyT,UAAA2C,mBACAoB,MAAA,EAEA,OAAAJ,GAAA3G,MAAA6G,GAKA9D,OAUAzW,KAAA2K,QAEA3K,KAAAoZ,aAAAiB,EAAAhX,QAGArD,KAAAoZ,iBAbAqB,EAAAhR,EAAA,SAAAsQ,EAAA,WACA9W,EAAA4T,IAAAC,GAAA,aAAA2D,GACAxX,EAAAyT,UAAAyC,kBAAAsB,GAAA,OACAxX,GAAAyT,UAAAM,wBARA/T,GAAAyT,UAAAM,oBAsBAoC,aAAA,SAAAvW,GACA,GAAA2C,GAAAxF,IAGA6C,MAAA,EACA,IAAAN,GAAAM,EAAA,aACA6X,EAAAzQ,EAAA,SACA0Q,EAAA1Q,EAAA,OAEAgP,EAAA,GAAAtM,GAAA3M,MACA2E,MAAA,IAEAyT,OAEAhE,MAAA,OAEAqE,IAAA,gDAAAiC,EAAA,4BAAwG7X,EAAA,oHAAA8X,EAAA,yFAExG9B,SAGA7P,SAAA,IAAA2R,EACApY,KAAA,QACAqH,GAAA,WACA,GAAAgQ,GAAAnQ,EAAA,IAAAiR,GACAnX,EAAAqW,EAAAzW,OAAAyW,EAAAvW,MAWA,OAVAE,GAAAgH,EAAAhH,GACA,QAAAhB,EAEAiD,EAAAoV,YAAArX,GAGAiC,EAAAqV,YAAAtX,IAIA,QAQA0V,GAAAzG,OAGAxS,KAAAiZ,SAIA2B,YAAA,SAAA/X,GACA7C,KAAAiD,OACA4T,IAAAC,GAAA,2BAAAjU,EAAA,6BAIAgY,YAAA,SAAAhY,GACA,GAAAI,GAAAjD,KAAAiD,OACAiX,EAAAjX,EAAAyT,UAAAiB,2BACAuC,KAGAA,EAAA7W,KAAAR,GACAI,EAAAyT,UAAAM,qBAIAC,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,MACAwP,EAAAjX,EAAAyT,UAAAiB,2BACA,IAAAuC,EAAA,CAGA,GAAAY,GAAAZ,EAAAjS,QACA,UAAAiS,EAAA9G,eAAA,QAAA0H,EAAA1H,eACApT,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,kBAmBAzE,EAAAnM,WACAyP,YAAAtD,EAEApC,QAAA,WACAtL,KAAAoZ,gBAGAA,aAAA,WACA,GAAA5T,GAAAxF,KAEAiD,EAAAjD,KAAAiD,OACAuJ,EAAAvJ,EAAAuJ,OAEA2H,EAAA3H,EAAA2H,aAGA4G,IACA5G,GAAA1I,QAAA,SAAAuP,GACA,GAAAC,GAAAD,EAAAzY,KACA8R,EAAA2G,EAAA3G,YAGA6G,EAAA,EAGA,WAAAD,GACA5G,EAAA5I,QAAA,SAAAzB,GACAA,IACAkR,GAAA,0BAAAlR,EAAA,aAKA,UAAAiR,GACA5G,EAAA5I,QAAA,SAAAzB,GACA,GAAAuK,GAAAvK,EAAAuK,IACAD,EAAAtK,EAAAsK,GACAC,KAEA2G,GAAA,oCAAA3G,EAAA,UAAAD,EAAA,6BAKAyG,EAAAjM,MACAsF,MAAA4G,EAAA5G,MACAqE,IAAA,uCAAAyC,EAAA,SACArC,SACA7P,SAAA,gBACAzG,KAAA,QACAqH,GAAA,SAAAiC,GACA,GAAA8F,GAAA9F,EAAA8F,OACAwJ,EAAA1R,EAAAkI,GACArC,EAAA6L,EAAA/H,cAEAgI,MAAA,EAWA,OARAA,GAFA,QAAA9L,EAEA6L,EAAAlT,SAAA5E,OAGA,SAAA8X,EAAA9X,OAAA,UAGAmC,EAAA6V,QAAAD,IAEA,QAMA,IAAAnC,GAAA,GAAAtM,GAAA3M,MACA2E,MAAA,IACAE,OAAA,IAEAuT,KAAA2C,GAIA9B,GAAAzG,OAGAxS,KAAAiZ,SAIAoC,QAAA,SAAAC,GACAtb,KAAAiD,OACA4T,IAAAC,GAAA,aAAAwE,KAkBA3N,EAAApM,WACAyP,YAAArD,EAEArC,QAAA,WACAtL,KAAA2K,QAEA3K,KAAAub,mBAGAvb,KAAAwb,sBAKAA,mBAAA,WACA,GAAAhW,GAAAxF,KAGAyb,EAAAxR,EAAA,OACAyR,EAAAzR,EAAA,OACA0R,EAAA1R,EAAA,OAEAgP,EAAA,GAAAtM,GAAA3M,MACA2E,MAAA,IAEAyT,OAEAhE,MAAA,OAEAqE,IAAA,sJAA8FiD,EAAA,0IAAmKC,EAAA,wOAA8JF,EAAA,0FAE/Z5C,SAEA7P,SAAA,IAAAyS,EACAlZ,KAAA,QACAqH,GAAA,WACA,GAAAgS,GAAAC,SAAApS,EAAA,IAAAiS,GAAAvY,OACA2Y,EAAAD,SAAApS,EAAA,IAAAkS,GAAAxY,MAQA,OANAyY,IAAAE,GAAAF,EAAA,GAAAE,EAAA,GAEAtW,EAAA6V,QAAAO,EAAAE,IAIA,QAQA7C,GAAAzG,OAGAxS,KAAAiZ,SAIAoC,QAAA,SAAAO,EAAAE,GAEA,GAAAC,OAAA,GACAtb,MAAA,GACA4C,EAAA,iEACA,KAAA0Y,EAAA,EAAmBA,EAAAH,EAAYG,IAAA,CAE/B,GADA1Y,GAAA,OACA,IAAA0Y,EACA,IAAAtb,EAAA,EAA2BA,EAAAqb,EAAYrb,IACvC4C,GAAA,sBAGA,KAAA5C,EAAA,EAA2BA,EAAAqb,EAAYrb,IACvC4C,GAAA,iBAGAA,IAAA,QAEAA,GAAA,qBAGA,IAAAJ,GAAAjD,KAAAiD,MACAA,GAAA4T,IAAAC,GAAA,aAAAzT,GAGAJ,EAAA4T,IAAAC,GAAA,2BACA7T,EAAA4T,IAAAC,GAAA,gCAIAyE,iBAAA,WACA,GAAAS,GAAAhc,KAGAic,EAAAhS,EAAA,WACAiS,EAAAjS,EAAA,WACAkS,EAAAlS,EAAA,WACAmS,EAAAnS,EAAA,WACAoS,EAAApS,EAAA,YAGA,IAAA0C,GAAA3M,MACA2E,MAAA,IAEAyT,OAEAhE,MAAA,OAEAqE,IAAA,4LAAmKwD,EAAA,wEAAAE,EAAA,4EAAAD,EAAA,wEAAAE,EAAA,wKAAAC,EAAA,+FAEnKxD,SAEA7P,SAAA,IAAAiT,EACA1Z,KAAA,QACAqH,GAAA,WAGA,MAFAoS,GAAAM,WAEA,KAIAtT,SAAA,IAAAkT,EACA3Z,KAAA,QACAqH,GAAA,WAGA,MAFAoS,GAAAO,WAEA,KAIAvT,SAAA,IAAAmT,EACA5Z,KAAA,QACAqH,GAAA,WAGA,MAFAoS,GAAAQ,WAEA,KAIAxT,SAAA,IAAAoT,EACA7Z,KAAA,QACAqH,GAAA,WAGA,MAFAoS,GAAAS,WAEA,KAIAzT,SAAA,IAAAqT,EACA9Z,KAAA,QACAqH,GAAA,WAGA,MAFAoS,GAAAU,aAEA,SAMAlK,QAIAmK,iBAAA,WACA,GAAAxT,MACAlG,EAAAjD,KAAAiD,OACAiX,EAAAjX,EAAAyT,UAAAiB,2BACA,IAAAuC,EAAA,CAGA,GAAA5K,GAAA4K,EAAA9G,aACA,WAAA9D,GAAA,OAAAA,EAAA,CAKA,GAAAsN,GAAA1C,EAAAjS,SACA4U,EAAAD,EAAA9T,WACAgU,EAAAD,EAAA9X,MACA8X,GAAApR,QAAA,SAAAsR,EAAAzL,GACA,GAAAyL,IAAA7C,EAAA,GAOA,MALA/Q,GAAA4T,IACAzL,QACAL,KAAA8L,EACAhY,OAAA+X,IAEA,GAKA,IAAAE,GAAAJ,EAAA3U,SACAgV,EAAAD,EAAAlU,WACAoU,EAAAD,EAAAlY,MAcA,OAbAkY,GAAAxR,QAAA,SAAA0R,EAAA7L,GACA,GAAA6L,IAAAP,EAAA,GAOA,MALAzT,GAAAgU,IACA7L,QACAL,KAAAkM,EACApY,OAAAmY,IAEA,IAKA/T,KAIAmT,QAAA,WAEA,GAAAc,GAAApd,KAAA2c,kBACA,IAAAS,EAAA,CAGA,GAAAC,GAAAD,EAAAD,GACAG,EAAA7T,EAAA4T,EAAApM,MACAsM,EAAAH,EAAAL,GACAD,EAAAS,EAAAxY,OAGAyY,EAAA5Z,SAAAW,cAAA,MACAkU,EAAA,GACApY,MAAA,EACA,KAAAA,EAAA,EAAmBA,EAAAyc,EAAczc,IACjCoY,GAAA,iBAEA+E,GAAA/Y,UAAAgU,EAEAhP,EAAA+T,GAAAzJ,YAAAuJ,KAIAf,QAAA,WAEA,GAAAa,GAAApd,KAAA2c,kBACA,IAAAS,EAAA,CAGA,GAAAC,GAAAD,EAAAD,GACAI,EAAAH,EAAAL,GACAU,EAAAF,EAAAjM,KACA7H,GAAA4T,EAAApM,MACAhJ,SACAa,WAGA2C,QAAA,SAAA0R,GACA,GAAAP,GAAAnT,EAAA0T,GACAN,EAAAD,EAAA9T,WACA4U,EAAAb,EAAA3b,IAAAuc,GACA9c,EAAA+c,EAAAtK,cAAA7D,aAIA9F,GADA7F,SAAAW,cAAA5D,IACAoT,YAAA2J,OAKAlB,QAAA,WAEA,GAAAY,GAAApd,KAAA2c,kBACA,IAAAS,EAAA,CAIA3T,EADA2T,EAAAD,GACAlM,MACA2B,WAIA6J,QAAA,WAEA,GAAAW,GAAApd,KAAA2c,kBACA,IAAAS,EAAA,CAGA,GAAAC,GAAAD,EAAAD,GACAI,EAAAH,EAAAL,GACAU,EAAAF,EAAAjM,KACA7H,GAAA4T,EAAApM,MACAhJ,SACAa,WAGA2C,QAAA,SAAA0R,GACA1T,EAAA0T,GACArU,WACA5H,IAAAuc,GAEA7K,aAKA8J,UAAA,WACA,GAAAzZ,GAAAjD,KAAAiD,OACAiX,EAAAjX,EAAAyT,UAAAiB,2BACA,IAAAuC,EAAA,CAGA,GAAAyD,GAAAzD,EAAA3G,YAAA,QACAoK,IAGAA,EAAA/K,WAIAqE,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,MACAwP,EAAAjX,EAAAyT,UAAAiB,2BACA,IAAAuC,EAAA,CAGA,GAAA5K,GAAA4K,EAAA9G,aACA,QAAA9D,GAAA,OAAAA,GACAtP,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,kBAmBAvE,EAAArM,WACAyP,YAAApD,EAEAtC,QAAA,WACAtL,KAAAoZ,gBAGAA,aAAA,WACA,GAAA5T,GAAAxF,KAGA4d,EAAA3T,EAAA,YACA0Q,EAAA1Q,EAAA,OAGAgP,EAAA,GAAAtM,GAAA3M,MACA2E,MAAA,IAEAyT,OAEAhE,MAAA,OAEAqE,IAAA,6CAAAmF,EAAA,mLAAAjD,EAAA,0FAEA9B,SACA7P,SAAA,IAAA2R,EACApY,KAAA,QACAqH,GAAA,WACA,GAAAgQ,GAAAnQ,EAAA,IAAAmU,GACAza,EAAAyW,EAAAzW,MAAAoG,MAWA,OANApG,IAEAqC,EAAA6V,QAAAlY,IAIA,QAQA8V,GAAAzG,OAGAxS,KAAAiZ,SAIAoC,QAAA,SAAAlY,GACAnD,KAAAiD,OACA4T,IAAAC,GAAA,aAAA3T,EAAA,iBAoBA0K,EAAAtM,WACAyP,YAAAnD,EAEAvC,QAAA,WACAtL,KAAAiD,OACAuJ,OACA0J,QAGAlW,KAAA2K,QACA3K,KAAAub,mBAEAvb,KAAAwb,uBAIAD,iBAAA,WACA,GAAAtY,GAAAjD,KAAAiD,OAGA4a,EAAA5T,EAAA,YACA6T,EAAA7T,EAAA,YACA8T,EAAA9T,EAAA,aACA+T,EAAA/T,EAAA,WAGAgU,IACA7J,MAAA,OACAqE,IAAA,mSAA8PoF,EAAA,oEAAAC,EAAA,oEAAAC,EAAA,yJAAAC,EAAA,uFAC9PnF,SACA7P,SAAA,IAAA6U,EACAtb,KAAA,QACAqH,GAAA,WACA,GAAAsU,GAAAjb,EAAAkb,YAKA,OAJAD,IACAA,EAAA9L,IAAA,oBAGA,KAGApJ,SAAA,IAAA8U,EACAvb,KAAA,QACAqH,GAAA,WACA,GAAAsU,GAAAjb,EAAAkb,YAKA,OAJAD,IACAA,EAAA9L,IAAA,oBAGA,KAGApJ,SAAA,IAAA+U,EACAxb,KAAA,QACAqH,GAAA,WACA,GAAAsU,GAAAjb,EAAAkb,YAKA,OAJAD,IACAA,EAAA9L,IAAA,qBAGA,KAGApJ,SAAA,IAAAgV,EACAzb,KAAA,QACAqH,GAAA,WACA,GAAAsU,GAAAjb,EAAAkb,YAKA,OAJAD,IACAA,EAAAtL,UAGA,OAMAqG,EAAA,GAAAtM,GAAA3M,MACA2E,MAAA,IACAyT,KAAA6F,GAEAhF,GAAAzG,OAGAxS,KAAAiZ,SAGAuC,mBAAA,WACA,GAAAvY,GAAAjD,KAAAiD,OACAmb,EAAAnb,EAAAmb,UACA5R,EAAAvJ,EAAAuJ,OAGA6R,EAAApU,EAAA,cACAqU,EAAArU,EAAA,WACAsU,EAAAtU,EAAA,YACAuU,EAAAvU,EAAA,YAGAgU,IACA7J,MAAA,OACAqE,IAAA,oEAAA4F,EAAA,oMAAgQC,EAAA,sJAChQzF,SAEA7P,SAAA,IAAAqV,EACA9b,KAAA,QACAqH,GAAA,WACA,GAAA6U,GAAAhV,EAAA,IAAA6U,GACAI,EAAAD,EAAA,EACA,KAAAC,EAIA,QAHAA,GAAAC,WAQA3V,SAAA,IAAAsV,EACA/b,KAAA,SACAqH,GAAA,WACA,GAAA6U,GAAAhV,EAAA,IAAA6U,GACAI,EAAAD,EAAA,EACA,KAAAC,EAEA,QAIA,IAAAE,GAAAF,EAAA7I,KAMA,OALA+I,GAAA7Z,QACAqZ,YAAAQ,IAIA,OAKAxK,MAAA,OACAqE,IAAA,yCAAA8F,EAAA,sJAAAC,EAAA,kFACA3F,SACA7P,SAAA,IAAAwV,EACAjc,KAAA,QACAqH,GAAA,WACA,GAAAiV,GAAApV,EAAA,IAAA8U,GACArJ,EAAA2J,EAAA1b,MAAAoG,MAOA,OALA2L,IACAkJ,EAAAU,cAAA5J,IAIA,OAOA6J,MACAvS,EAAA4I,qBAAA5I,EAAAwS,iBAAAxS,EAAAyS,kBAAAvY,OAAAwY,YAEAH,EAAAjQ,KAAAmP,EAAA,IAEAzR,EAAAwI,aAEA+J,EAAAjQ,KAAAmP,EAAA,GAIA,IAAAhF,GAAA,GAAAtM,GAAA3M,MACA2E,MAAA,IACAyT,KAAA2G,GAEA9F,GAAAzG,OAGAxS,KAAAiZ,SAIAhC,gBAAA,SAAApL,GACA,GAAA5I,GAAAjD,KAAAiD,OACAyH,EAAA1K,KAAA0K,KACAzH,GAAAkb,cACAne,KAAA2K,SAAA,EACAD,EAAAS,SAAA,gBAEAnL,KAAA2K,SAAA,EACAD,EAAAyH,YAAA,gBAUA,IAAAgN,KAEAA,GAAAC,KAAA3U,EAEA0U,EAAAE,KAAAlT,EAEAgT,EAAAG,SAAAhT,EAEA6S,EAAAzS,SAAAH,EAEA4S,EAAAxK,KAAA/H,EAEAuS,EAAAI,OAAA1S,EAEAsS,EAAAK,KAAA1S,EAEAqS,EAAAM,cAAA1S,EAEAoS,EAAAO,UAAA1S,EAEAmS,EAAAQ,KAAA1S,EAEAkS,EAAA9T,KAAA6B,EAEAiS,EAAAS,QAAAzS,EAEAgS,EAAAU,UAAAzS,EAEA+R,EAAAW,UAAAvS,EAEA4R,EAAAY,MAAAvS,EAEA2R,EAAAa,KAAAvS,EAEA0R,EAAAc,SAAAvS,EAEAyR,EAAAe,MAAAvS,EAEAwR,EAAAgB,MAAAvS,EAEAuR,EAAAiB,MAAAvS,EAYAE,EAAAxM,WACAyP,YAAAjD,EAGAsS,KAAA,WACA,GAAA7a,GAAAxF,KAEAiD,EAAAjD,KAAAiD,SACAA,EAAAuJ,YACA1G,WAGA2F,QAAA,SAAA6U,GACA,GAAAC,GAAApB,EAAAmB,EACAC,IAAA,kBAAAA,KAEA/a,EAAAM,MAAAwa,GAAA,GAAAC,GAAAtd,MAKAjD,KAAAwgB,gBAGAxgB,KAAAygB,cAIAD,cAAA,WACA,GAAAvd,GAAAjD,KAAAiD,OACAyd,EAAAzd,EAAAyd,aACA5a,EAAA9F,KAAA8F,MACA0G,EAAAvJ,EAAAuJ,OAEAgI,EAAAhI,EAAAgI,OAAA,CACA9K,GAAA5D,EAAA,SAAA+D,EAAAgB,GACA,GAAAH,GAAAG,EAAAH,KACAA,KAEAA,EAAA0H,IAAA,UAAAoC,GACAkM,EAAAtV,OAAAV,OAMA+V,WAAA,WACA,GAAA3a,GAAA9F,KAAA8F,MACA7C,EAAAjD,KAAAiD,MACAyG,GAAA5D,EAAA,SAAA+D,EAAAgB,GACA,GAAAtI,GAAAsI,EAAAtI,IACA,IAAAA,EAAA,CAGA,GAAAmI,GAAAG,EAAAH,MACA0B,EAAAvB,EAAAuB,QACAvB,GAAAoO,KAGA,WAAA1W,GAAAsI,EAAAS,SACAZ,EAAAkB,GAAA,iBAAAC,GACA,MAAA5I,EAAAyT,UAAAiK,YAGA9V,EAAAS,QAAAO,KAKA,aAAAtJ,GAAA6J,GACA1B,EAAAkB,GAAA,sBAAAC,GACA,MAAA5I,EAAAyT,UAAAiK,aAIAvU,EAAAqL,cAAA1L,WAAA,WACAK,EAAAoG,QACqB,QACJ5G,GAAA,sBAAAC,GAEjBO,EAAAN,cAAAC,WAAA,WACAK,EAAAJ,QACqB,KAKrB,UAAAzJ,GAAAsI,EAAAS,SACAZ,EAAAkB,GAAA,iBAAAC,GACAA,EAAA+M,kBACA,MAAA3V,EAAAyT,UAAAiK,YAIA9V,EAAAS,QAAAO,SAOA+U,aAAA,WAEAlX,EADA1J,KAAA8F,MACA,SAAA+D,EAAAgB,GACAA,EAAAoM,iBACAlL,WAAA,WACAlB,EAAAoM,mBACiB,SAkJjBpH,EAAAtO,WACAyP,YAAAnB,EAGAwQ,KAAA,WAEArgB,KAAAygB,cAIAI,MAAA,WACA7gB,KAAAqD,KAAA,gBAIAA,KAAA,SAAAF,GACA,GAAAF,GAAAjD,KAAAiD,OACAO,EAAAP,EAAAO,UACAH,MAAA,EACA,UAAAF,EAIA,MAHAE,GAAAG,EAAAH,OAEAA,IAAAiC,QAAA,eACAjC,CAEAG,GAAAH,KAAAF,GAGAF,EAAA6d,iBAKAC,QAAA,WAGA,MAAA/R,GAFAhP,KAAAiD,OACAO,YAKAD,KAAA,SAAAJ,GACA,GAAAF,GAAAjD,KAAAiD,OACAO,EAAAP,EAAAO,UACAD,MAAA,EACA,UAAAJ,EAIA,MAHAI,GAAAC,EAAAD,OAEAA,IAAA+B,QAAA,eACA/B,CAEAC,GAAAD,KAAA,MAAAJ,EAAA,QAGAF,EAAA6d,iBAKA1V,OAAA,SAAA/H,GACA,GAAAJ,GAAAjD,KAAAiD,MACAA,GAAAO,UACA4H,OAAA3B,EAAApG,IAGAJ,EAAA6d,iBAIAL,WAAA,WAEAzgB,KAAAghB,qBAGAhhB,KAAAihB,kBAGAjhB,KAAAkhB,eAGAlhB,KAAAmhB,eAGAnhB,KAAAohB,aAGAphB,KAAAqhB,aAGArhB,KAAAshB,eAIAN,mBAAA,WAKA,QAAAO,GAAA1V,GAEA5I,EAAAyT,UAAA6K,YAEAte,EAAA6C,MAAA8a,eARA,GAAA3d,GAAAjD,KAAAiD,OACAO,EAAAP,EAAAO,SAUAA,GAAAoI,GAAA,QAAA2V,GACA/d,EAAAoI,GAAA,qBAAAC,GAEArI,EAAAoI,GAAA,aAAA2V,KAEA/d,EAAAoI,GAAA,mBAAAC,GACA0V,IAEA/d,EAAAqO,IAAA,aAAA0P,MAKAN,gBAAA,WAIA,QAAAO,GAAA9J,GACA,GAAA+J,GAAAhY,EAAA,cACAgY,GAAA9N,aAAA+D,GACAzU,EAAAyT,UAAAyC,kBAAAsI,GAAA,GACAxe,EAAAyT,UAAAM,mBACAU,EAAA9E,SAIA,QAAA8O,GAAA7V,GACA,GAAA6L,GAAAzU,EAAAyT,UAAAiB,4BACAmD,EAAApD,EAAAzP,QAEA,0BAAA6S,EAAAzX,OAIA,WADAme,GAAA9J,EAIA,IAAAoD,EAAApH,MAAAlQ,GAAA,CAMA,MADAkU,EAAAtE,gBAMAsE,EAAAnU,QAMAie,EAAA9J,KAaA,QAAAiK,GAAA9V,GACA,GAAA6L,GAAAzU,EAAAyT,UAAAiB,2BACA,IAAAD,EAAA,CAGA,GAAAoD,GAAApD,EAAAzP,SACA2Z,EAAAlK,EAAAtE,cACAyO,EAAA/G,EAAA1H,aAEA,aAAAwO,GAAA,QAAAC,GAKA5e,EAAA4T,IAAAiL,sBAAA,eAMA,QAAA7e,EAAA8e,eAAA,CAGA,GAAAN,GAAAhY,EAAA,cASA,OARAgY,GAAA1N,YAAA+G,GACA7X,EAAAyT,UAAAyC,kBAAAsI,GAAA,GACAxe,EAAAyT,UAAAM,mBAGA/T,EAAA8e,gBAAA,MAEAlW,GAAAmW,iBAIA,GAAAC,GAAAhf,EAAAyT,UAAAiK,WAAAuB,WAGAjf,GAAA4T,IAAAC,GAAA,mBACA7T,EAAAyT,UAAA6K,YACAte,EAAAyT,UAAAiK,WAAAuB,cAAAD,GAEAhf,EAAA4T,IAAAC,GAAA,kBAGA,IAAAqL,GAAAzK,EAAArU,OAAA0B,MACA9B,GAAAyT,UAAAiK,WAAAuB,YAAA,IAAAC,IAGAlf,EAAA8e,gBAAA,GAIAlW,EAAAmW,mBA1GA,GAAA/e,GAAAjD,KAAAiD,OACAO,EAAAP,EAAAO,SA0CAA,GAAAoI,GAAA,iBAAAC,GACA,KAAAA,EAAAuW,SAKAV,EAAA7V,KA4DArI,EAAAoI,GAAA,mBAAAC,GACA,QAAAA,EAAAuW,QAIA,YADAnf,EAAA8e,gBAAA,EAIAJ,GAAA9V,MAKAqV,aAAA,WACA,GAAAje,GAAAjD,KAAAiD,OACAO,EAAAP,EAAAO,SAEAA,GAAAoI,GAAA,mBAAAC,GACA,OAAAA,EAAAuW,QAAA,CAIA,sBADA5e,EAAAH,OAAAkM,cAAAhG,WAGAsC,GAAAmW,qBAFA,MAOAxe,EAAAoI,GAAA,iBAAAC,GACA,OAAAA,EAAAuW,QAAA,CAGA,GAAAX,OAAA,GACAY,EAAA7e,EAAAH,OAAAkM,cAAAhG,MAGA8Y,IAAA,SAAAA,IAEAZ,EAAAhY,EAAA,gBACAjG,EAAAH,KAAA,IACAG,EAAA4H,OAAAqW,GACAxe,EAAAyT,UAAAyC,kBAAAsI,GAAA,MACAxe,EAAAyT,UAAAM,wBAMAmK,aAAA,WAWA,QAAAmB,KACA,GAAAC,GAAAC,KAAAD,MACAE,GAAA,CAMA,OALAF,GAAAG,GAAA,MAEAD,GAAA,GAEAC,EAAAH,EACAE,EAEA,QAAAE,KACAD,EAAA,EArBA,GAAAzf,GAAAjD,KAAAiD,OACAuJ,EAAAvJ,EAAAuJ,OACAqI,EAAArI,EAAAqI,iBACAE,EAAAvI,EAAAuI,gBACAxG,EAAA/B,EAAAsI,eACAtR,EAAAP,EAAAO,UAIAkf,EAAA,CAgBAlf,GAAAoI,GAAA,iBAAAC,GACA,IAAAsK,EAAAK,SAIA3K,EAAAmW,iBAIAM,KAAA,CAKA,GAAA9T,GAAAH,EAAAxC,EAAAgJ,EAAAtG,GACAJ,EAAAH,EAAAnC,EACAsC,KAAA7I,QAAA,cAEA,IAAAoS,GAAAzU,EAAAyT,UAAAiB,2BACA,IAAAD,EAAA,CAGA,GAAApI,GAAAoI,EAAAtE,aAGA,aAAA9D,GAAA,QAAAA,EAMA,MALAyF,IAAAvK,EAAAuK,KAEA5G,EAAA,IAAA4G,EAAA5G,IAAA,SAEAlL,GAAA4T,IAAAC,GAAA,mBAAA3I,EAAA,OAUA,KAAAK,EAGA,WADAmU,IAGA,KAGA5N,GAAAvK,EAAAuK,KAEAvG,EAAA,IAAAuG,EAAAvG,IAAA,KAEAvL,EAAA4T,IAAAC,GAAA,aAAAtI,GACa,MAAAoU,GAEb7N,GAAAvK,EAAAuK,KAEA5G,EAAA,IAAA4G,EAAA5G,IAAA,KAEAlL,EAAA4T,IAAAC,GAAA,mBAAA3I,EAAA,aAKA3K,EAAAoI,GAAA,iBAAAC,GACA,IAAAsK,EAAAK,SAGA3K,EAAAmW,iBAIAM,KAAA,CAKA,GAAAO,GAAAlU,EAAA9C,EACA,IAAAgX,KAAA9d,OAAA,CAKA,GAAA2S,GAAAzU,EAAAyT,UAAAiB,2BACA,IAAAD,EAAA,CAGA,GAAApI,GAAAoI,EAAAtE,aAGA,aAAA9D,GAAA,QAAAA,EAAA,CAKArM,EAAAmb,UACAA,UAAAyE,UAKAzB,WAAA,WACA,GAAAne,GAAAjD,KAAAiD,MACAA,GAAAO,UAEAoI,GAAA,mBAAAC,GACA,OAAAA,EAAAuW,SAGAnf,EAAA4T,IAAAiL,sBAAA,eAIA,GAAApK,GAAAzU,EAAAyT,UAAAiB,2BACA,IAAAD,EAAA,CAGA,GAAAoD,GAAApD,EAAAzP,SACA2Z,EAAAlK,EAAAtE,cACAyO,EAAA/G,EAAA1H,aAEA,UAAAwO,GAAA,QAAAC,EAEA5e,EAAA4T,IAAAC,GAAA,qBAGA7T,EAAA4T,IAAAC,GAAA,yCAGAjL,EAAAmW,sBAKAX,WAAA,WACA,GAAApe,GAAAjD,KAAAiD,OACAO,EAAAP,EAAAO,SAGAA,GAAAoI,GAAA,uBAAAC,GACA,GAAAiX,GAAA9iB,KACAke,EAAAzU,EAAAqZ,EAEA,OAAA5E,EAAAza,KAAA,cAMAR,EAAAkb,aAAAD,EAGAjb,EAAAyT,UAAAyC,kBAAA+E,GACAjb,EAAAyT,UAAAM,sBAIAxT,EAAAoI,GAAA,wBAAAC,GACAA,EAAA8F,OAAAC,QAAA,SAKA3O,EAAAkb,aAAA,SAKAmD,YAAA,WACA,GAAAre,GAAAjD,KAAAiD,MAGAwG,GAAA7F,UACAgI,GAAA,6CAAAC,GACAA,EAAAmW,mBAIA/e,EAAAO,UACAoI,GAAA,gBAAAC,GACAA,EAAAmW,gBACA,IAAAnM,GAAAhK,EAAAkX,cAAAlX,EAAAkX,aAAAlN,KACAA,MAAA9Q,QAKA9B,EAAAmb,UACAA,UAAAvI,OAeA/F,EAAAvO,WACAyP,YAAAlB,EAGAgH,GAAA,SAAAnW,EAAAkC,GACA,GAAAI,GAAAjD,KAAAiD,MASA,IANAA,EAAA+f,mBACApf,SAAAqf,YAAA,wBACAhgB,EAAA+f,kBAAA,GAIA/f,EAAAyT,UAAAiK,WAAA,CAKA1d,EAAAyT,UAAAM,kBAGA,IAAAkM,GAAA,IAAAviB,CACAX,MAAAkjB,GAEAljB,KAAAkjB,GAAArgB,GAGA7C,KAAAmjB,aAAAxiB,EAAAkC,GAIAI,EAAA6C,MAAA8a,eAGA3d,EAAAyT,UAAA6K,YACAte,EAAAyT,UAAAM,mBAGA/T,EAAAmgB,QAAAngB,EAAAmgB,WAIAC,YAAA,SAAAhgB,GACA,GAAAJ,GAAAjD,KAAAiD,OACAqgB,EAAArgB,EAAAyT,UAAAiK,UAEA3gB,MAAA8hB,sBAAA,cAEA9hB,KAAAmjB,aAAA,aAAA9f,GACSigB,EAAAC,YAETD,EAAAE,iBACAF,EAAAC,WAAA9Z,EAAApG,GAAA,KACSigB,EAAAG,WAETH,EAAAG,UAAApgB,IAKAqgB,YAAA,SAAAhZ,GACA,GAAAzH,GAAAjD,KAAAiD,OACAqgB,EAAArgB,EAAAyT,UAAAiK,UAEA2C,GAAAC,aACAD,EAAAE,iBACAF,EAAAC,WAAA7Y,EAAA,MAKAyY,aAAA,SAAAxiB,EAAAkC,GACAe,SAAAqf,YAAAtiB,GAAA,EAAAkC,IAIAgV,kBAAA,SAAAlX,GACA,MAAAiD,UAAAiU,kBAAAlX,IAIAuW,kBAAA,SAAAvW,GACA,MAAAiD,UAAAsT,kBAAAvW,IAIAmhB,sBAAA,SAAAnhB,GACA,MAAAiD,UAAAke,sBAAAnhB,KAeAoP,EAAAxO,WACAyP,YAAAjB,EAGA4Q,SAAA,WACA,MAAA3gB,MAAAgQ,eAIAuR,UAAA,SAAAoC,GACA,GAAAA,EAGA,YADA3jB,KAAAgQ,cAAA2T,EAKA,IAAAjN,GAAAhQ,OAAAkd,cACA,QAAAlN,EAAAmN,WAAA,CAGA,GAAAP,GAAA5M,EAAAoN,WAAA,GAGAC,EAAA/jB,KAAA2X,0BAAA2L,EACA,IAAAS,GAKA,UAAAA,EAAAtgB,KAAA,qBAAAsgB,EAAAxQ,YAAA,4BAIAvT,KAAAiD,OACAO,UACAuP,UAAAgR,KAEA/jB,KAAAgQ,cAAAsT,MAKAvM,cAAA,SAAAiN,GACA,MAAAA,IAEAA,GAAA,EAEA,IAAAV,GAAAtjB,KAAAgQ,aACAsT,IACAA,EAAAW,SAAAD,IAKA3K,iBAAA,WAEA,MADArZ,MAAAgQ,cAEAhQ,KAAAgQ,cAAA3F,WAEA,IAKAsN,0BAAA,SAAA2L,GACAA,KAAAtjB,KAAAgQ,aACA,IAAAiB,OAAA,EACA,IAAAqS,EAEA,MADArS,GAAAqS,EAAAY,wBACAza,EAAA,IAAAwH,EAAA5H,SAAA4H,IAAA6C,aAGAwG,sBAAA,SAAAgJ,GACAA,KAAAtjB,KAAAgQ,aACA,IAAAiB,OAAA,EACA,IAAAqS,EAEA,MADArS,GAAAqS,EAAAa,eACA1a,EAAA,IAAAwH,EAAA5H,SAAA4H,IAAA6C,aAGA0G,oBAAA,SAAA8I,GACAA,KAAAtjB,KAAAgQ,aACA,IAAAiB,OAAA,EACA,IAAAqS,EAEA,MADArS,GAAAqS,EAAAc,aACA3a,EAAA,IAAAwH,EAAA5H,SAAA4H,IAAA6C,aAKA6C,iBAAA,WACA,GAAA2M,GAAAtjB,KAAAgQ,aACA,UAAAsT,MAAAa,gBACAb,EAAAa,iBAAAb,EAAAc,cACAd,EAAApB,cAAAoB,EAAAe,YASArN,iBAAA,WACA,GAAAN,GAAAhQ,OAAAkd,cACAlN,GAAA4N,kBACA5N,EAAA6N,SAAAvkB,KAAAgQ,gBAIA4G,iBAAA,WACA,GAAA3T,GAAAjD,KAAAiD,OACAqgB,EAAAtjB,KAAA2gB,WACAjW,MAAA,EAEA,IAAA4Y,GAIAtjB,KAAA2W,mBAKA,IAEAR,EAAAI,YAEAtT,EAAA4T,IAAAC,GAAA,wBAEAwM,EAAAkB,OAAAlB,EAAAc,aAAAd,EAAAe,UAAA,GAEArkB,KAAAuhB,UAAA+B,KAEA5Y,EAAAjB,EAAA,4BACAxG,EAAA4T,IAAAC,GAAA,aAAApM,GACA1K,KAAAmZ,kBAAAzO,GAAA,IAES,MAAAkY,MAMTzJ,kBAAA,SAAAzO,EAAAsZ,EAAAS,GAIA,GAAA/Z,EAAA3F,OAAA,CAIA,GAAAkM,GAAAvG,EAAA,GACA4Y,EAAA1f,SAAA8gB,aAEAD,GACAnB,EAAAqB,mBAAA1T,GAEAqS,EAAAsB,WAAA3T,GAGA,iBAAA+S,IACAV,EAAAW,SAAAD,GAIAhkB,KAAAuhB,UAAA+B,MAkBArT,EAAA1O,WACAyP,YAAAf,EAEAuC,KAAA,SAAAqS,GACA,GAAArf,GAAAxF,IAGA,KAAAA,KAAAmQ,QAAA,CAGAnQ,KAAAmQ,SAAA,CAGA,IAAAK,GAAAxQ,KAAAwQ,IACA,IAAAxQ,KAAAoQ,UAIApQ,KAAAoQ,WAAA,MAJA,CACApQ,KAAAsQ,eACAlF,OAAAoF,GAMAgS,KAAAD,MAAAviB,KAAAkQ,MAAA,KACA2U,GAAA,IACArU,EAAA4B,IAAA,YAAAyS,EAAA,KACA7kB,KAAAkQ,MAAAsS,KAAAD,MAKA,IAAAuC,GAAA9kB,KAAAqQ,UACAyU,IACAxN,aAAAwN,GAEAA,EAAA/Y,WAAA,WACAvG,EAAAuf,SACS,OAGTA,MAAA,WACA/kB,KAAAwQ,KACAoC,SAGA5S,KAAAkQ,MAAA,EACAlQ,KAAAmQ,SAAA,EACAnQ,KAAAoQ,WAAA,GAIA,IAAA4U,GAAA,kBAAAC,SAAA,gBAAAA,QAAAC,SAAA,SAAAvb,GACA,aAAAA,IACC,SAAAA,GACD,MAAAA,IAAA,kBAAAsb,SAAAtb,EAAAqH,cAAAiU,QAAAtb,IAAAsb,OAAA1jB,UAAA,eAAAoI,GAaA8G,GAAAlP,WACAyP,YAAAP,EAGA0U,OAAA,SAAAC,EAAAC,GACA,GAAApiB,GAAAjD,KAAAiD,OACAwR,EAAAxR,EAAAuJ,OAAAiI,MACA6Q,EAAAriB,EAAAuJ,OAAA8Y,WAEA,IAAA7Q,EACA,SAAA5D,OAAA,gBAAAwU,GAAAD,GAEAE,IAAA,kBAAAA,GACAA,EAAAF,GAEAnL,MAAAmL,IAMAtG,cAAA,SAAAnK,GACA,GAAAqH,GAAAhc,IAEA,IAAA2U,EAAA,CAGA,GAAA1R,GAAAjD,KAAAiD,OACAuJ,EAAAvJ,EAAAuJ,OAGAoI,EAAApI,EAAAoI,aACAoF,MAAA,EACA,IAAApF,GAAA,kBAAAA,IAEA,iBADAoF,EAAApF,EAAAD,IAIA,WADAsF,OAAAD,EAKA/W,GAAA4T,IAAAC,GAAA,0BAAAnC,EAAA,8BAGA,IAAAmO,GAAAlf,SAAAW,cAAA,MACAue,GAAAyC,OAAA,WACA,GAAAC,GAAAhZ,EAAAyI,eACAuQ,IAAA,kBAAAA,IACAA,EAAA7Q,GAGAmO,EAAA,MAEAA,EAAA2C,QAAA,WACA3C,EAAA,KAEA9G,EAAAmJ,OAAA,sCAAAxQ,EAAA,cAGAmO,EAAA4C,QAAA,WACA5C,EAAA,MAEAA,EAAAvO,IAAAI,IAIAyJ,UAAA,SAAAvI,GACA,GAAA8P,GAAA3lB,IAEA,IAAA6V,KAAA9Q,OAAA,CAKA,GAAA9B,GAAAjD,KAAAiD,OACAuJ,EAAAvJ,EAAAuJ,OACAwS,EAAAxS,EAAAwS,gBACA5J,EAAA5I,EAAA4I,oBAEAwQ,EAAApZ,EAAA2I,iBACA0Q,EAAAD,EAAA,UACAE,EAAAtZ,EAAAuZ,oBAAA,IACA1Q,EAAA7I,EAAA6I,gBAAA,GACAC,EAAA9I,EAAA8I,oBACA0Q,EAAAxZ,EAAAwZ,uBACAzQ,EAAA/I,EAAA+I,qBACA0Q,EAAAzZ,EAAAkJ,mBACAO,EAAAzJ,EAAAiJ,kBAAA,IACAD,EAAAhJ,EAAAgJ,eACA,OAAAA,IACAA,GAAA,EAEA,IAAAyJ,GAAAzS,EAAAyS,eAEA,IAAAA,GAEAD,GAAA5J,EAFA,CAQA,GAAA8Q,MACAC,IAyBA,IAxBArc,EAAA+L,EAAA,SAAAuQ,GACA,GAAAzlB,GAAAylB,EAAAzlB,KACA0lB,EAAAD,EAAAC,IAGA,IAAA1lB,GAAA0lB,EAIA,6CAAAxX,KAAAlO,OAEAwlB,GAAArX,KAAA,IAAAnO,EAAA,SAGAilB,EAAAS,MAEAF,GAAArX,KAAA,IAAAnO,EAAA,OAAAklB,EAAA,SAKAK,GAAApX,KAAAsX,KAGAD,EAAAphB,OAEA,WADA/E,MAAAmlB,OAAA,cAAAgB,EAAAjU,KAAA,MAGA,IAAAgU,EAAAnhB,OAAA+gB,EAEA,WADA9lB,MAAAmlB,OAAA,SAAAW,EAAA,MAKA,IAAA7G,GAAA,kBAAAA,GAIA,WAHAA,GAAAiH,EAAAlmB,KAAA8e,cAAAwH,KAAAtmB,MAOA,IAAAumB,GAAA,GAAAC,SAOA,IANA1c,EAAAoc,EAAA,SAAAE,GACA,GAAAzlB,GAAA0U,GAAA+Q,EAAAzlB,IACA4lB,GAAAnb,OAAAzK,EAAAylB,KAIApH,GAAA,gBAAAA,GAAA,CAEA,GAAAyH,GAAAzH,EAAAtQ,MAAA,IACAsQ,GAAAyH,EAAA,EACA,IAAAC,GAAAD,EAAA,MACA/c,GAAA4L,EAAA,SAAAzL,EAAA1G,GAKA6iB,IACAhH,EAAAxV,QAAA,OACAwV,GAAA,IAEAA,GAAA,IAEAA,IAAAnV,EAAA,IAAA1G,GAIAojB,EAAAnb,OAAAvB,EAAA1G,KAEAujB,IACA1H,GAAA,IAAA0H,EAIA,IAAA9Q,GAAA,GAAA+Q,eAqFA,IApFA/Q,EAAAgR,KAAA,OAAA5H,GAGApJ,EAAAK,UACAL,EAAAiR,UAAA,WAEAZ,EAAAhQ,SAAA,kBAAAgQ,GAAAhQ,SACAgQ,EAAAhQ,QAAAL,EAAA3S,GAGA0iB,EAAAR,OAAA,WAIAvP,EAAAkR,SACAlR,EAAAkR,OAAAC,WAAA,SAAAlb,GACA,GAAAmb,OAAA,GAEAC,EAAA,GAAAhX,GAAAhN,EACA4I,GAAAqb,mBACAF,EAAAnb,EAAAsb,OAAAtb,EAAAub,MACAH,EAAAzU,KAAAwU,MAMApR,EAAAyR,mBAAA,WACA,GAAAle,OAAA,EACA,QAAAyM,EAAA0R,WAAA,CACA,GAAA1R,EAAA2R,OAAA,KAAA3R,EAAA2R,QAAA,IAQA,MANAtB,GAAAjQ,OAAA,kBAAAiQ,GAAAjQ,OACAiQ,EAAAjQ,MAAAJ,EAAA3S,OAIA0iB,GAAAR,OAAA,gCAAAvP,EAAA2R,OAKA,IADApe,EAAAyM,EAAA4R,aACA,qBAAAre,EAAA,YAAA6b,EAAA7b,IACA,IACAA,EAAAse,KAAAC,MAAAve,GACyB,MAAAyZ,GAOzB,MALAqD,GAAAlQ,MAAA,kBAAAkQ,GAAAlQ,MACAkQ,EAAAlQ,KAAAH,EAAA3S,EAAAkG,OAGAwc,GAAAR,OAAA,8BAAAhc,GAIA,GAAA8c,EAAA0B,cAAA,KAAAxe,EAAAye,MAQqB,CACrB,GAAA3B,EAAA0B,cAAA,kBAAA1B,GAAA0B,aAEA1B,EAAA0B,aAAAhC,EAAA7G,cAAAwH,KAAAX,GAAAxc,EAAAlG,OACyB,EAEzBkG,EAAAnG,UACAyI,QAAA,SAAAkJ,GACAgR,EAAA7G,cAAAnK,KAKAsR,EAAAnQ,SAAA,kBAAAmQ,GAAAnQ,SACAmQ,EAAAnQ,QAAAF,EAAA3S,EAAAkG,OApBA8c,GAAAlQ,MAAA,kBAAAkQ,GAAAlQ,MACAkQ,EAAAlQ,KAAAH,EAAA3S,EAAAkG,GAIAwc,EAAAR,OAAA,kCAAAhc,EAAAye,SAsBA3B,EAAAtQ,QAAA,kBAAAsQ,GAAAtQ,OAAA,CACA,GAAAkS,GAAA5B,EAAAtQ,OAAAC,EAAA3S,EAAAijB,EACA,IAAA2B,GAAA,qBAAAA,EAAA,YAAA7C,EAAA6C,KACAA,EAAAC,QAGA,WADA9nB,MAAAmlB,OAAA0C,EAAAE,KAkBA,MAXAre,GAAA6L,EAAA,SAAA1L,EAAA1G,GACAyS,EAAAoS,iBAAAne,EAAA1G,KAIAyS,EAAAJ,sBAGAI,GAAAqS,KAAA1B,GAOAnR,GACAtL,EAAA+L,EAAA,SAAAuQ,GACA,GAAA5gB,GAAAmgB,EACAuC,EAAA,GAAAhJ,WACAgJ,GAAAC,cAAA/B,GACA8B,EAAA3C,OAAA,WACA/f,EAAAsZ,cAAA9e,KAAAmJ,cAYA,IAAA2H,GAAA,CAmBAJ,GAAAnP,WACAyP,YAAAN,EAGA0X,YAAA,WAEA,GAAAzW,KACA3R,MAAAwM,OAAA1L,OAAAunB,OAAA1W,EAAAnF,EAAAxM,KAAA0F,aAGA,IAAA4iB,GAAAtoB,KAAAwM,OAAA+b,SACAnR,IACA1N,GAAA4e,EAAA,SAAAze,EAAA1G,GAGAiU,EAAAtI,MACAuI,IAAA,GAAAmR,QAAA3e,EAAA,OACA1G,UAIAnD,KAAAwM,OAAA4K,YAIAqR,SAAA,WACA,GAAAjjB,GAAAxF,KAEA2Q,EAAA3Q,KAAA2Q,gBACA+X,EAAAjf,EAAAkH,GACAC,EAAA5Q,KAAA4Q,aAEA+X,EAAA3oB,KAAAwM,OACAgI,EAAAmU,EAAAnU,OAGAkM,MAAA,GACAnQ,MAAA,GACA/M,MAAA,GACAiP,MAAA,EAEA,OAAA7B,GAEA8P,EAAAjX,EAAA,eACA8G,EAAA9G,EAAA,eAGAgJ,EAAAiW,EAAA5f,WAGA4f,EAAAtd,OAAAsV,GAAAtV,OAAAmF,GAGAmQ,EAAAtO,IAAA,8BAAAA,IAAA,2BACA7B,EAAA6B,IAAA,2BAAAA,IAAA,qBAAAA,IAAA,oBAGAsO,EAAAgI,EACAnY,EAAA9G,EAAAmH,GAEA6B,EAAAlC,EAAAzH,YAIAtF,EAAAiG,EAAA,eACAjG,EAAAC,KAAA,0BAAA2O,IAAA,gBAAAA,IAAA,iBAGAK,KAAA1N,OACAvB,EAAA4H,OAAAqH,GAEAjP,EAAA4H,OAAA3B,EAAA,gBAIA8G,EAAAnF,OAAA5H,GAGAkd,EAAAvV,SAAA,eACAoF,EAAApF,SAAA,sBACAoF,EAAA6B,IAAA,UAAAoC,GACAhR,EAAA2H,SAAA,WAGA,IAAAyd,GAAA3e,EAAA,eACAyW,GAAAjd,KAAA,KAAAmlB,EACA,IAAAC,GAAA5e,EAAA,YACAzG,GAAAC,KAAA,KAAAolB,GAGA7oB,KAAA0gB,eACA1gB,KAAAuQ,qBACAvQ,KAAAwD,YACAxD,KAAA4oB,gBACA5oB,KAAA6oB,YAGA,IAAAC,IAAA,CACAvY,GAAA3E,GAAA,8BAEAkd,GAAA,IAEAvY,EAAA3E,GAAA,4BAEAkd,GAAA,IAIAvY,EAAA3E,GAAA,yBAEAkd,GAAAtjB,EAAA4d,QAAA5d,EAAA4d,WAEA1C,EAAA9U,GAAA,mBACA5L,KAAAojB,QAAApjB,KAAAojB,YAIAuF,EAAAI,SAAAJ,EAAAK,UAEAhpB,KAAAipB,SAAA,EAEAxf,EAAA7F,UAAAgI,GAAA,iBAAAC,GAEA,GAAAqd,GAAA1lB,EAAAuP,UAAAtJ,EAAAoC,EAAA8F,SAGAwX,EAAAzI,EAAA3N,UAAAtJ,EAAAoC,EAAA8F,SACAyX,EAAA1I,EAAA,IAAA7U,EAAA8F,MAEA,IAAAuX,EAWA1jB,EAAAyjB,SACAzjB,EAAAujB,SAAAvjB,EAAAujB,UAEAvjB,EAAAyjB,SAAA,MAdA,CAEA,GAAAE,IAAAC,EACA,MAGA5jB,GAAAyjB,SACAzjB,EAAAwjB,QAAAxjB,EAAAwjB,SAEAxjB,EAAAyjB,SAAA,OAYAI,aAAA,WACArpB,KAAA6W,IAAA,GAAA/G,GAAA9P,OAIAspB,kBAAA,WACAtpB,KAAA0W,UAAA,GAAA3G,GAAA/P,OAIAupB,eAAA,WACAvpB,KAAAoe,UAAA,GAAA3N,GAAAzQ,OAIAwpB,WAAA,WACAxpB,KAAA8F,MAAA,GAAAiI,GAAA/N,MACAA,KAAA8F,MAAAua,QAIAoJ,UAAA,WACAzpB,KAAAoD,IAAA,GAAAyM,GAAA7P,MACAA,KAAAoD,IAAAid,QAIAS,cAAA,SAAA4I,GACA,GAAAlmB,GAAAxD,KAAAwD,UACAiP,EAAAjP,EAAAsF,UACA,KAAA2J,EAAA1N,OAIA,MAFAvB,GAAA4H,OAAA3B,EAAA,oBACAzJ,MAAA8gB,eAIA,IAAA6I,GAAAlX,EAAAjB,MAEA,IAAAkY,EAAA,CAEA,GAAArmB,GAAAsmB,EAAAtmB,OAAAkM,cACAD,EAAAqa,EAAAvW,aACA,aAAA/P,GAAA,UAAAA,GAAA,MAAAiM,EAIA,MAFA9L,GAAA4H,OAAA3B,EAAA,oBACAzJ,MAAA8gB,gBAKA9gB,KAAA0W,UAAAyC,kBAAAwQ,GAAA,MACA3pB,KAAA0W,UAAAM,oBAIAyJ,WAAA,WAEA,GAAAmJ,GAAA,EACAC,EAAA7pB,KAAAoD,IAAAC,OACAslB,EAAA3oB,KAAAwM,OAGAsd,EAAAnB,EAAAmB,mBACAA,EAAAjO,SAAAiO,EAAA,MACAA,GAAA,KACAA,EAAA,IAGA,IAAAnkB,GAAAgjB,EAAAhjB,QACAA,IAAA,kBAAAA,KAKA3F,KAAAojB,OAAA,WAEA,GAAA2G,GAAA/pB,KAAAoD,IAAAC,MAEA0mB,GAAAhlB,SAAA8kB,EAAA9kB,QAEAglB,IAAAF,IAMAD,GACAtS,aAAAsS,GAEAA,EAAA7d,WAAA,WAEApG,EAAAokB,GACAF,EAAAE,GACiBD,KAKjB,IAAAd,GAAAL,EAAAK,MACAA,IAAA,kBAAAA,KACAhpB,KAAAgpB,OAAA,WACA,GAAAe,GAAA/pB,KAAAoD,IAAAC,MACA2lB,GAAAe,IAKA,IAAAhB,GAAAJ,EAAAI,OACAA,IAAA,kBAAAA,KACA/oB,KAAA+oB,QAAA,WACAA,OAMAljB,OAAA,WAEA7F,KAAAooB,cAGApoB,KAAAyoB,WAGAzoB,KAAAqpB,eAGArpB,KAAAspB,oBAGAtpB,KAAAypB,YAGAzpB,KAAAwpB,aAGAxpB,KAAAupB,iBAGAvpB,KAAA8gB,eAAA,GAGA9gB,KAAAygB,cAIAuJ,aAAA,WACAvgB,EAAAyK,UAKA,KACAtQ,SACC,MAAAgf,GACD,SAAA/R,OAAA,eAniJA,WAGA,kBAAA/P,QAAAunB,SACAvnB,OAAAunB,OAAA,SAAA1W,EAAAsY,GAEA,SAAAtY,EAEA,SAAAuY,WAAA,6CAKA,QAFAC,GAAArpB,OAAA6Q,GAEAL,EAAA,EAA+BA,EAAA8Y,UAAArlB,OAA0BuM,IAAA,CACzD,GAAA+Y,GAAAD,UAAA9Y,EAEA,UAAA+Y,EAEA,OAAAC,KAAAD,GAEAvpB,OAAAS,UAAAC,eAAAjB,KAAA8pB,EAAAC,KACAH,EAAAG,GAAAD,EAAAC,IAKA,MAAAH,KAKAI,QAAAhpB,UAAAqQ,UACA2Y,QAAAhpB,UAAAqQ,QAAA2Y,QAAAhpB,UAAAipB,iBAAAD,QAAAhpB,UAAAkpB,oBAAAF,QAAAhpB,UAAAmpB,mBAAAH,QAAAhpB,UAAAopB,kBAAAJ,QAAAhpB,UAAAqpB,uBAAA,SAAAlpB,GAGA,IAFA,GAAAkQ,IAAA5R,KAAA4D,UAAA5D,KAAA6qB,eAAA3mB,iBAAAxC,GACArB,EAAAuR,EAAA7M,SACA1E,GAAA,GAAAuR,EAAA5H,KAAA3J,KAAAL,OACA,MAAAK,IAAA,MAsgJA,IAGAuE,GAAAhB,SAAAW,cAAA,QAQA,OAPAK,GAAArC,KAAA,WACAqC,EAAAH,UALA,68gBAMAb,SAAAknB,qBAAA,QAAA9gB,KAAA,GAAA2I,YAAA/N,GAGA8B,OAAAqkB,YAAAra,KNmaM,SAAU9Q,EAAQD,EAASO,GO79JjC,GAAAmU,GAAcnU,EAAQ,EACtB,iBAAAmU,SAA4CzU,EAAAS,EAASgU,EAAA,MACrDA,EAAA2W,SAAAprB,EAAAD,QAAA0U,EAAA2W,OAEa9qB,GAAQ,GAA0D,WAAAmU,GAAA,OPs+JzE,SAAUzU,EAAQD,EAASO,GQ7+JjCP,EAAAC,EAAAD,QAA2BO,EAAQ,IAA4C,GAK/EP,EAAAmP,MAAclP,EAAAS,EAAS,ghPAA0iP,MRs/J3jP,SAAUT,EAAQD,GS18JxB,QAAAsrB,GAAAjhB,EAAAkhB,GACA,GAAA7W,GAAArK,EAAA,OACAmhB,EAAAnhB,EAAA,EACA,KAAAmhB,EACA,MAAA9W,EAGA,IAAA6W,GAAA,kBAAAE,MAAA,CACA,GAAAC,GAAAC,EAAAH,EAKA,QAAA9W,GAAA3L,OAJAyiB,EAAAI,QAAArmB,IAAA,SAAAsmB,GACA,uBAAAL,EAAAM,WAAAD,EAAA,SAGA9iB,QAAA2iB,IAAAnZ,KAAA,MAGA,OAAAmC,GAAAnC,KAAA,MAIA,QAAAoZ,GAAAI,GAKA,yEAHAN,KAAAO,SAAAC,mBAAAnE,KAAAoE,UAAAH,MAGA,MArEA9rB,EAAAD,QAAA,SAAAurB,GACA,GAAA7f,KAwCA,OArCAA,GAAAhB,SAAA,WACA,MAAArK,MAAAkF,IAAA,SAAA8E,GACA,GAAAqK,GAAA4W,EAAAjhB,EAAAkhB,EACA,OAAAlhB,GAAA,GACA,UAAAA,EAAA,OAAmCqK,EAAA,IAEnCA,IAEGnC,KAAA,KAIH7G,EAAAhL,EAAA,SAAAJ,EAAA6rB,GACA,gBAAA7rB,KACAA,IAAA,KAAAA,EAAA,KAEA,QADA8rB,MACA1rB,EAAA,EAAgBA,EAAAL,KAAA+E,OAAiB1E,IAAA,CACjC,GAAAqC,GAAA1C,KAAAK,GAAA,EACA,iBAAAqC,KACAqpB,EAAArpB,IAAA,GAEA,IAAArC,EAAA,EAAYA,EAAAJ,EAAA8E,OAAoB1E,IAAA,CAChC,GAAA2J,GAAA/J,EAAAI,EAKA,iBAAA2J,GAAA,IAAA+hB,EAAA/hB,EAAA,MACA8hB,IAAA9hB,EAAA,GACAA,EAAA,GAAA8hB,EACKA,IACL9hB,EAAA,OAAAA,EAAA,aAAA8hB,EAAA,KAEAzgB,EAAAyD,KAAA9E,MAIAqB,IT+hKM,SAAUzL,EAAQD,EAASO,GUx/JjC,QAAA8rB,GAAAC,GACA,OAAA5rB,GAAA,EAAiBA,EAAA4rB,EAAAlnB,OAAmB1E,IAAA,CACpC,GAAA2J,GAAAiiB,EAAA5rB,GACA6rB,EAAAC,EAAAniB,EAAAtH,GACA,IAAAwpB,EAAA,CACAA,EAAAE,MACA,QAAAC,GAAA,EAAqBA,EAAAH,EAAAI,MAAAvnB,OAA2BsnB,IAChDH,EAAAI,MAAAD,GAAAriB,EAAAsiB,MAAAD,GAEA,MAAYA,EAAAriB,EAAAsiB,MAAAvnB,OAAuBsnB,IACnCH,EAAAI,MAAAxd,KAAAyd,EAAAviB,EAAAsiB,MAAAD,IAEAH,GAAAI,MAAAvnB,OAAAiF,EAAAsiB,MAAAvnB,SACAmnB,EAAAI,MAAAvnB,OAAAiF,EAAAsiB,MAAAvnB,YAEK,CAEL,OADAunB,MACAD,EAAA,EAAqBA,EAAAriB,EAAAsiB,MAAAvnB,OAAuBsnB,IAC5CC,EAAAxd,KAAAyd,EAAAviB,EAAAsiB,MAAAD,IAEAF,GAAAniB,EAAAtH,KAA8BA,GAAAsH,EAAAtH,GAAA0pB,KAAA,EAAAE,WAK9B,QAAAE,KACA,GAAAC,GAAA7oB,SAAAW,cAAA,QAGA,OAFAkoB,GAAAlqB,KAAA,WACA8c,EAAA1M,YAAA8Z,GACAA,EAGA,QAAAF,GAAA5iB,GACA,GAAA+iB,GAAA9Z,EACA6Z,EAAA7oB,SAAAC,cAAA,SAAA8oB,EAAA,MAAAhjB,EAAAjH,GAAA,KAEA,IAAA+pB,EAAA,CACA,GAAAG,EAGA,MAAAC,EAOAJ,GAAA3Y,WAAAhB,YAAA2Z,GAIA,GAAAK,EAAA,CAEA,GAAAC,GAAAC,GACAP,GAAAQ,MAAAT,KACAE,EAAAQ,EAAA5G,KAAA,KAAAmG,EAAAM,GAAA,GACAna,EAAAsa,EAAA5G,KAAA,KAAAmG,EAAAM,GAAA,OAGAN,GAAAD,IACAE,EAAAS,EAAA7G,KAAA,KAAAmG,GACA7Z,EAAA,WACA6Z,EAAA3Y,WAAAhB,YAAA2Z,GAMA,OAFAC,GAAA/iB,GAEA,SAAAyjB,GACA,GAAAA,EAAA,CACA,GAAAA,EAAAhb,MAAAzI,EAAAyI,KACAgb,EAAAC,QAAA1jB,EAAA0jB,OACAD,EAAA1B,YAAA/hB,EAAA+hB,UACA,MAEAgB,GAAA/iB,EAAAyjB,OAEAxa,MAcA,QAAAsa,GAAAT,EAAAnb,EAAAsB,EAAAjJ,GACA,GAAAyI,GAAAQ,EAAA,GAAAjJ,EAAAyI,GAEA,IAAAqa,EAAAa,WACAb,EAAAa,WAAAjoB,QAAAkoB,EAAAjc,EAAAc,OACG,CACH,GAAAob,GAAA5pB,SAAA6pB,eAAArb,GACAnD,EAAAwd,EAAAxd,UACAA,GAAAqC,IAAAmb,EAAA3Z,YAAA7D,EAAAqC,IACArC,EAAAlK,OACA0nB,EAAA9Y,aAAA6Z,EAAAve,EAAAqC,IAEAmb,EAAA9Z,YAAA6a,IAKA,QAAAL,GAAAV,EAAA9iB,GACA,GAAAyI,GAAAzI,EAAAyI,IACAib,EAAA1jB,EAAA0jB,MACA3B,EAAA/hB,EAAA+hB,SAiBA,IAfA2B,GACAZ,EAAA1a,aAAA,QAAAsb,GAEA/qB,EAAAorB,OACAjB,EAAA1a,aAAA4a,EAAAhjB,EAAAjH,IAGAgpB,IAGAtZ,GAAA,mBAAAsZ,EAAAH,QAAA,SAEAnZ,GAAA,uDAAyDgZ,KAAAO,SAAAC,mBAAAnE,KAAAoE,UAAAH,MAAA,OAGzDe,EAAAa,WACAb,EAAAa,WAAAjoB,QAAA+M,MACG,CACH,KAAAqa,EAAAkB,YACAlB,EAAA3Z,YAAA2Z,EAAAkB,WAEAlB,GAAA9Z,YAAA/O,SAAA6pB,eAAArb,KArNA,GAAAwb,GAAA,mBAAAhqB,SAEA,uBAAAiqB,gBACAD,EACA,SAAA/c,OACA,0JAKA,IAAAid,GAAmB5tB,EAAQ,GAe3BisB,KAQA9M,EAAAuO,IAAAhqB,SAAAyb,MAAAzb,SAAAknB,qBAAA,YACAmC,EAAA,KACAD,EAAA,EACAJ,GAAA,EACAC,EAAA,aACAvqB,EAAA,KACAqqB,EAAA,kBAIAG,EAAA,mBAAAzW,YAAA,eAAAxH,KAAAwH,UAAAC,UAAA/G,cAEA3P,GAAAD,QAAA,SAAAouB,EAAA1iB,EAAA2iB,EAAAC,GACArB,EAAAoB,EAEA1rB,EAAA2rB,KAEA,IAAAhC,GAAA6B,EAAAC,EAAA1iB,EAGA,OAFA2gB,GAAAC,GAEA,SAAAiC,GAEA,OADAC,MACA9tB,EAAA,EAAmBA,EAAA4rB,EAAAlnB,OAAmB1E,IAAA,CACtC,GAAA2J,GAAAiiB,EAAA5rB,GACA6rB,EAAAC,EAAAniB,EAAAtH,GACAwpB,GAAAE,OACA+B,EAAArf,KAAAod,GAEAgC,GACAjC,EAAA6B,EAAAC,EAAAG,GACAlC,EAAAC,IAEAA,IAEA,QAAA5rB,GAAA,EAAmBA,EAAA8tB,EAAAppB,OAAsB1E,IAAA,CACzC,GAAA6rB,GAAAiC,EAAA9tB,EACA,QAAA6rB,EAAAE,KAAA,CACA,OAAAC,GAAA,EAAuBA,EAAAH,EAAAI,MAAAvnB,OAA2BsnB,IAClDH,EAAAI,MAAAD,WAEAF,GAAAD,EAAAxpB,OAwFA,IAAA6qB,GAAA,WACA,GAAAa,KAEA,iBAAA9c,EAAA+c,GAEA,MADAD,GAAA9c,GAAA+c,EACAD,EAAAnc,OAAAlP,SAAAmP,KAAA,WVqoKM,SAAUtS,EAAQD,GW7yKxBC,EAAAD,QAAA,SAAAouB,EAAA1iB,GAGA,OAFA4gB,MACAqC,KACAjuB,EAAA,EAAiBA,EAAAgL,EAAAtG,OAAiB1E,IAAA,CAClC,GAAA2J,GAAAqB,EAAAhL,GACAqC,EAAAsH,EAAA,GACAoI,EAAApI,EAAA,GACAqjB,EAAArjB,EAAA,GACA0hB,EAAA1hB,EAAA,GACAukB,GACA7rB,GAAAqrB,EAAA,IAAA1tB,EACA+R,MACAib,QACA3B,YAEA4C,GAAA5rB,GAGA4rB,EAAA5rB,GAAA4pB,MAAAxd,KAAAyf,GAFAtC,EAAAnd,KAAAwf,EAAA5rB,IAAmCA,KAAA4pB,OAAAiC,KAKnC,MAAAtC,KXyzKM,SAAUrsB,EAAQ+B,EAAqBzB,GAE7C,YYp1KAA,GAAAQ,EAAAiB,EAAA,qBAAA6sB,IAAO,IAAMA,IACXrqB,SACEiC,eADO,WACW,GAAAZ,GAAAxF,KACZyuB,EAAU,4CAEVC,GAAe,EACfC,EAAgB3uB,KAAKoE,UAAUqqB,EACnCzuB,MAAK8D,QAAQ6O,YAAYgc,GACzBA,EAAcjd,iBAAiB,QAAS,SAAAjP,GACtC+C,EAAK7B,UAAUa,UAAYkqB,EAAe,GAAK,oBAC/CC,EAAclqB,UAAYiqB,EAAeD,EAN9B,2CAOXC,GAAgBA,IACf,OZ+1KH,SAAU9uB,EAAQ+B,EAAqBzB,GAE7C,Ya72KAA,GAAAQ,EAAAiB,EAAA,qBAAAitB,IAAO,IAAMA,IACXzqB,SACE6B,eADO,WACW,GAAAR,GAAAxF,KACZ6uB,EAAgB7uB,KAAKoE,UAAU,iDACnCpE,MAAK8D,QAAQ6O,YAAYkc,GACzBA,EAAcnd,iBAAiB,QAAS,SAAAjP,GACtC,GAAIY,GAAOmC,EAAKopB,YAChBppB,GAAKvC,OAAO4T,IAAIC,GAAG,aAAczT,GACjCmC,EAAKvC,OAAOG,IAAIC,KAAKA,KACpB,IAELurB,WAVO,WAcL,GAAI5c,GAAMhS,KAAKgE,SAAS8mB,qBAAqB,IAU7C,OATA9lB,OAAMC,KAAK+M,GAAK9M,IAAI,SAAA8E,GACdA,EAAKpF,OACPoF,EAAK5E,gBAAgB,SAEnB4E,EAAKxF,WACPwF,EAAK5E,gBAAgB,WAIlBpF,KAAKiD,OAAOG,IAAIC,OACfiC,QAAQ,qBAAsB,IAC9BA,QAAQ,qBAAsB,IAC9BA,QAAQ,qBAAsB,IAC9BA,QAAQ,qBAAsB,IAE9BA,QAAQ,oBAAqB,IAC7BA,QAAQ,oBAAqB,IAC7BA,QAAQ,oBAAqB,IAC7BA,QAAQ,qBAAsB,IAC9BA,QAAQ,qBAAsB,IAC9BA,QAAQ,sBAAuB,IAC/BA,QAAQ,6BAA8B,IACtCA,QAAQ,yBAA0B,IAClCA,QAAQ,oBAAqB,Qb62KrC,SAAU1F,EAAQ+B,EAAqBzB,GAE7C,Yct5KAA,GAAAQ,EAAAiB,EAAA,qBAAAmtB,IAAO,IAAMA,IACX3qB,SACE2qB,YADO,WAeL,MAbU9uB,MAAKiD,OAAOG,IAAIC,OACZqL,MAAM,wCAGCuD,OAAO,SAAAjI,GAC1B,MAAgB,KAATA,IAAgBA,EAAKjE,SAAS,QACpCkM,OAAO,SAAAjI,GAER,OAAQA,EAAKjE,SAAS,MAAQiE,EAAK+kB,WAAW,UAC7C7pB,IAAI,SAAA8E,GACL,YAAaA,EAAb,SACCkI,KAAK,KAIVjM,gBAjBO,WAiBY,GAAAT,GAAAxF,KACbgvB,EAAiBhvB,KAAKoE,UAAU,2DACpCpE,MAAK8D,QAAQ6O,YAAYqc,GACzBA,EAAetd,iBAAiB,QAAS,SAAAjP,GACvC,GAAIwsB,GAAgBzpB,EAAKspB,aACzBtpB,GAAKlC,MAAM,QAAS2rB,GACpBzpB,EAAKvC,OAAOG,IAAIC,KAAK4rB,KACpB,Odi6KH,SAAUrvB,EAAQ+B,EAAqBzB,GAE7C,Ye57KAA,GAAAQ,EAAAiB,EAAA,qBAAAutB,IAAO,IAAMA,IACX/qB,SACE+B,aADO,WACS,GAAAV,GAAAxF,KACVmvB,EAAcnvB,KAAKoE,UAAU,oDACjCpE,MAAK8D,QAAQ6O,YAAYwc,GACzBA,EAAYzd,iBAAiB,QAAS,SAAAjP,GACpC+C,EAAK0pB,aACJ,IAELA,SARO,WASLlvB,KAAKiD,OAAOG,IAAIyd,QAChB7gB,KAAKiD,OAAO4T,IAAIC,GAAG,aAAc,mBfu8KjC,SAAUlX,EAAQ+B,EAAqBzB,GAE7C,YgBp9KAA,GAAAQ,EAAAiB,EAAA,qBAAAytB,IAAO,IAAMA,IACXjrB,SACEgC,eADO,WACW,GAAAX,GAAAxF,KACZqvB,EAAgBrvB,KAAKoE,UAAU,2DACnCpE,MAAK8D,QAAQ6O,YAAY0c,GACzBA,EAAc3d,iBAAiB,QAAS,SAAA7F,GACtCA,EAAE+M,kBACF/M,EAAEmW,gBACF,IAAIsN,GAAS1rB,SAASC,cAAT,IAA2B2B,EAAK9C,GAAhC,cACR4sB,GAGHA,EAAO1qB,MAAM2qB,QAAU,QAFvB/pB,EAAKgqB,eAIPhqB,EAAKiqB,eACJ,IAELA,WAhBO,WAgBO,GAAAzT,GAAAhc,KACRsvB,EAAS1rB,SAASC,cAAT,IAA2B7D,KAAK0C,GAAhC,eACTgtB,EAAQ9rB,SAASC,cAAT,IAA2B7D,KAAK0C,GAAhC,gBACRitB,EAAQ/rB,SAASC,cAAT,IAA2B7D,KAAK0C,GAAhC,gBACRktB,EAAWhsB,SAASC,cAAT,IAA2B7D,KAAK0C,GAAhC,mBACXmtB,EAASjsB,SAASC,cAAT,IAA2B7D,KAAK0C,GAAhC,gBACbgtB,GAAMhe,iBAAiB,QAAS,SAAA7F,GAC9BA,EAAE+M,kBACF0W,EAAO1qB,MAAM2qB,QAAU,OACvBI,EAAM9sB,MAAQ,GACd+sB,EAAS/sB,MAAQ,KAChB,GACHgtB,EAAOne,iBAAiB,QAAS,SAAA7F,GAC/BA,EAAE+M,kBACE+W,EAAM9sB,OAAS+sB,EAAS/sB,OAC1BmZ,EAAKoT,WAAWO,EAAM9sB,MAAO+sB,EAAS/sB,OACtCysB,EAAO1qB,MAAM2qB,QAAU,OACvBI,EAAM9sB,MAAQ,GACd+sB,EAAS/sB,MAAQ,KAEjBysB,EAAO1qB,MAAM2qB,QAAU,OACvBI,EAAM9sB,MAAQ,GACd+sB,EAAS/sB,MAAQ,MAElB,IAEL2sB,aA1CO,WA2CL,GAAIF,GAAS1rB,SAASW,cAAc,OAChCmrB,EAAQ9rB,SAASW,cAAc,KAC/BurB,EAAKlsB,SAASW,cAAc,MAC5BorB,EAAQ/rB,SAASW,cAAc,SAC/BqrB,EAAWhsB,SAASW,cAAc,YAClCsrB,EAASjsB,SAASW,cAAc,SACpC+qB,GAAO5sB,GAAK1C,KAAK0C,GAAK,cACtBgtB,EAAMhtB,GAAK1C,KAAK0C,GAAK,eACrBitB,EAAMjtB,GAAK1C,KAAK0C,GAAK,eACrBitB,EAAMnrB,UAAY,cAClBorB,EAASltB,GAAK1C,KAAK0C,GAAK,kBACxBktB,EAASprB,UAAY,iBACrBmrB,EAAM5d,aAAa,cAAe,aAClC6d,EAAS7d,aAAa,cAAe,QACrC8d,EAAOntB,GAAK1C,KAAK0C,GAAK,gBACtBmtB,EAAOrrB,UAAY,eACnBqrB,EAAOE,UAAY,KACnBD,EAAGC,UAAY,YACfL,EAAMlrB,UAAY,6CAClB8qB,EAAO3c,YAAY+c,GACnBJ,EAAO3c,YAAYmd,GACnBR,EAAO3c,YAAYgd,GACnBL,EAAO3c,YAAYid,GACnBN,EAAO3c,YAAYkd,GACnBP,EAAO9qB,UAAY,cACnBxE,KAAK+D,UAAU4O,YAAY2c,GAC3BA,EAAO1qB,MAAM2qB,QAAU,SAEzBhlB,kBAvEO,SAuEWlH,GAChB,MAAY,OAARA,EACK,GAEFA,EAAKiC,QAAQ,MAAO,QAAQA,QAAQ,MAAO,QAAQA,QAAQ,MAAO,WAE3E8pB,WA7EO,SA6EK5qB,EAAWwb,GACrBhgB,KAAKiD,OAAO4T,IAAIC,GAAG,aAAnB,eAAgDtS,EAAhD,kBAA2EA,EAA3E,KAAyFxE,KAAKuK,kBAAkByV,GAAhH,gChBi+KA,SAAUpgB,EAAQ+B,EAAqBzB,GAE7C,YiBljLA,IAAAsH,GAAA,WAA0B,GAAAwoB,GAAAhwB,KAAaiwB,EAAAD,EAAAE,cAAkD,QAAxBF,EAAAG,MAAAC,IAAAH,GAAwB,OAAiBrgB,OAAOlN,GAAAstB,EAAAttB,OACjH+E,KACA4oB,GAAiB7oB,SAAAC,kBACF9F,GAAA","file":"vue-wangeditor-simple.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"vue-wangeditor-simple\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vue-wangeditor-simple\"] = factory();\n\telse\n\t\troot[\"vue-wangeditor-simple\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"vue-wangeditor-simple\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vue-wangeditor-simple\"] = factory();\n\telse\n\t\troot[\"vue-wangeditor-simple\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_wangeditor__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_wangeditor___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_wangeditor__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__editor_css__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__editor_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__editor_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__plugins_fullscreen__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__plugins_clearStyle__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__plugins_clearFormat__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__plugins_clearAll__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__plugins_insertCode__ = __webpack_require__(14);\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'VueWangeditor',\n  mixins: [__WEBPACK_IMPORTED_MODULE_2__plugins_fullscreen__[\"a\" /* fullscreen */], __WEBPACK_IMPORTED_MODULE_3__plugins_clearStyle__[\"a\" /* clearStyle */], __WEBPACK_IMPORTED_MODULE_4__plugins_clearFormat__[\"a\" /* clearFormat */], __WEBPACK_IMPORTED_MODULE_5__plugins_clearAll__[\"a\" /* clearAll */], __WEBPACK_IMPORTED_MODULE_6__plugins_insertCode__[\"a\" /* insertCode */]],\n  props: {\n    options: {\n      type: Object,\n      default: function _default(_) {\n        return {};\n      }\n    },\n    id: String,\n    initContent: String,\n    value: String,\n    disabled: Boolean\n  },\n  data: function data() {\n    return {\n      editor: {}\n    };\n  },\n\n  watch: {\n    initContent: function initContent(val) {\n      this.editor.txt.html(val);\n      this.$emit('input', val);\n      // this.$emit('update:text', this.editor.txt.text())\n      this.$emit('get-text', this.editor.txt.text());\n    },\n    disabled: function disabled(val) {\n      this.editor.$textElem.attr('contenteditable', !val);\n    }\n  },\n  computed: {\n    editorEle: function editorEle() {\n      if (document.querySelector('#' + this.id)) {\n        return document.querySelector('#' + this.id);\n      }\n    },\n    toolbar: function toolbar() {\n      if (document.querySelector('#' + this.id + ' .w-e-toolbar')) {\n        return document.querySelector('#' + this.id + ' .w-e-toolbar');\n      }\n    },\n    container: function container() {\n      if (document.querySelector('#' + this.id + ' .w-e-text-container')) {\n        return document.querySelector('#' + this.id + ' .w-e-text-container');\n      }\n    },\n    textWrap: function textWrap() {\n      if (document.querySelector('#' + this.id + ' .w-e-text')) {\n        return document.querySelector('#' + this.id + ' .w-e-text');\n      }\n    },\n    menuBtns: function menuBtns() {\n      if (document.querySelectorAll('#' + this.id + ' .w-e-menu')) {\n        return document.querySelectorAll('#' + this.id + ' .w-e-menu');\n      }\n    }\n  },\n  methods: {\n    createBtn: function createBtn(btnHtml) {\n      var btn = document.createElement('div');\n      btn.className = 'w-e-menu';\n      // btn.style.zIndex = '10001'\n      btn.innerHTML = btnHtml;\n      return btn;\n    },\n    initSize: function initSize() {\n      if (this.options.width) {\n        this.container.style.width = this.options.width;\n        this.toolbar.style.width = this.options.width;\n      }\n      if (this.options.height) {\n        this.container.style.height = this.options.height;\n      }\n    },\n    fixedCss: function fixedCss() {\n      // position: relative + z-index => 导致了子元素的层级无法超过父元素的兄弟元素，故去掉\n      // bug #14\n      if (this.menuBtns.length > 0) {\n        Array.from(this.menuBtns).map(function (btn) {\n          if (btn.getAttribute('style')) btn.removeAttribute('style');\n        });\n      }\n      // container有同样的问题\n      var cssText = this.container.getAttribute('style');\n      cssText = cssText.replace('z-index', 'zIndex');\n      this.container.style.cssText = cssText;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.editor = new __WEBPACK_IMPORTED_MODULE_0_wangeditor___default.a('#' + this.id);\n\n    // init change event\n    this.editor.customConfig.onchange = function (html) {\n      _this.$emit('input', html);\n      _this.$emit('update:text', _this.editor.txt.text());\n    };\n\n    // init props options\n    Object.keys(this.options).map(function (property) {\n      _this.editor.customConfig[property] = _this.options[property];\n    });\n\n    // create the editor\n    this.editor.create();\n\n    this.initContent && this.editor.txt.html(this.initContent);\n\n    this.initSize();\n    this.fixedCss();\n\n    // clearStyle\n    if (this.options.menus && this.options.menus.includes('clearStyle')) {\n      this.initClearStyle();\n    }\n\n    // clearFormat\n    if (this.options.menus && this.options.menus.includes('clearFormat')) {\n      this.initClearFormat();\n    }\n\n    // clearAll\n    if (this.options.menus && this.options.menus.includes('clearAll')) {\n      this.initClearAll();\n    }\n\n    // insertCode\n    if (this.options.menus && this.options.menus.includes('insertCode')) {\n      this.initInsertCode();\n    }\n\n    // fullscreen\n    if (this.options.menus && this.options.menus.includes('fullscreen')) {\n      this.initFullscreen();\n    }\n\n    this.editor.$textElem.attr('contenteditable', !this.disabled);\n  }\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editor_vue__ = __webpack_require__(2);\n\n\n/* istanbul ignore next */\n__WEBPACK_IMPORTED_MODULE_0__editor_vue__[\"a\" /* default */].install = function (Vue) {\n  Vue.component(__WEBPACK_IMPORTED_MODULE_0__editor_vue__[\"a\" /* default */].name, __WEBPACK_IMPORTED_MODULE_0__editor_vue__[\"a\" /* default */]);\n};\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(__WEBPACK_IMPORTED_MODULE_0__editor_vue__[\"a\" /* default */]);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (__WEBPACK_IMPORTED_MODULE_0__editor_vue__[\"a\" /* default */]);\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_editor_vue__ = __webpack_require__(0);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_3aa57f8a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_editor_vue__ = __webpack_require__(15);\nvar normalizeComponent = __webpack_require__(3)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_editor_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_3aa57f8a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_editor_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            alt: '[坏笑]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n        }, {\n            alt: '[舔屏]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n        }, {\n            alt: '[污]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n        }]\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n            alt: '[草泥马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n            alt: '[神马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n            alt: '[浮云]'\n        }]\n    }, {\n        // tab 的标题\n        title: 'emoji',\n        // type -> 'emoji' / 'image'\n        type: 'emoji',\n        // content -> 数组\n        content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n            elemResult = replaceHtmlSymbol(elemResult);\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 100) {\n                // 间隔大于 100 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n                // val = encodeURIComponent(val)\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(6);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(8)(\"af2083c0\", content, true, {});\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(7)(false);\n// imports\n\n\n// module\nexports.push([module.i, \"@font-face{font-family:w-icon;src:url(data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAA1EAAwAAAAADPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABHAAAAYAAAAGA4Zbj9k9TLzIAAAKcAAAAYAAAAGAPEgdsY21hcAAAAvwAAADEAAAAxL7TwtlnYXNwAAADwAAAAAgAAAAIAAAAEGdseWYAAAPIAAAGeAAABnjO8r8caGVhZAAACkAAAAA2AAAANhCeVXdoaGVhAAAKeAAAACQAAAAkB8ID5mhtdHgAAAqcAAAAlAAAAJQiAABCbG9jYQAACzAAAABMAAAATBDoElhtYXhwAAALfAAAACAAAAAgACsAVm5hbWUAAAucAAABhgAAAYaZSgn7cG9zdAAADSQAAAAgAAAAIAADAAAAAQAAAAoAHgAsAAFsYXRuAAgABAAAAAAAAAABAAAAAWxpZ2EACAAAAAEAAAABAAQABAAAAAEACgAAAAEAFAAHACYAkAC0APwBDgEkATwAAQAHAAkACwAMABcAGAAaACQABQAMABgAKAA6AFwAIAAFABYAFAAXABcAIwAHABQAEwAXABQAEQALAB8ACAAUABEAEQAIABUAFwALACIAEAARAAsACAAWAAQADAAUABYAEgAIABgAGAAPABMADQAgAAYACAATAAkACwARAAIABgAUAB4ABgAbABUACAATAAoAHgAHABMAEQAIABYADQALAAQACgAYACYAMgAhAAYAGQATABMACwARACEABgAPABEAGAALABYAHQAFAA8AEQALAAYAHQAKAA8AEQALAAQACwASABUAGAAcAAEABAAfAAYADgAWAA8AEwAQAAEABAAjAAgACwAWABIADwATAAgAEQABAAQAIgAJABwAFwAPABoAHAANAAUABwABAAQAIwACACQAAwPAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADqggPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAqAAAACYAIAAEAAYAAQAgAC0AMQAzADcAYQBpAHAAdQB56STpiuoP6lvqb+qC//3//wAAAAAAIAAtADEAMwA3AGEAYwBrAHIAd+kk6YnqD+pb6m/qgf/9//8AAf/j/9f/1P/T/9D/p/+m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) format(\\\"woff\\\");font-weight:400;font-style:normal}[class*=\\\" w-icon-\\\"],[class^=w-icon-]{font-family:w-icon!important;speak:none;font-style:normal;font-weight:400;font-variant:normal;text-transform:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;letter-spacing:0;-webkit-font-feature-settings:\\\"liga\\\";-moz-font-feature-settings:\\\"liga=1\\\";-moz-font-feature-settings:\\\"liga\\\";-ms-font-feature-settings:\\\"liga\\\" 1;font-feature-settings:\\\"liga\\\";-webkit-font-variant-ligatures:discretionary-ligatures;font-variant-ligatures:discretionary-ligatures}.w-e-droplist{z-index:10010}.w-e-text-container .w-e-text h1{font-size:24px;margin:22px 0;font-weight:700}.w-e-text-container .w-e-text h2{font-size:22px;margin:20px 0;font-weight:700}.w-e-text-container .w-e-text h3{font-size:20px;margin:18px 0;font-weight:700}.w-e-text-container .w-e-text h4{font-size:18px;margin:16px 0;font-weight:700}.w-e-text-container .w-e-text h5{font-size:16px;margin:14px 0;font-weight:700}.w-e-text-container .w-e-text table td,.w-e-text-container .w-e-text table th{text-align:center}.w-e-text-container .w-e-text ul li{list-style-type:disc}.w-e-text-container .w-e-text ol li{list-style-type:decimal}.w-e-text-container .w-e-text b{font-weight:800}.w-e-text-container .w-e-text a{color:#2196f3;text-decoration:underline}.w-e-text-container .w-e-panel-container{z-index:10}.w-e-toolbar{flex-wrap:wrap;-webkit-box-lines:multiple}.w-icon-enlarge:before{content:\\\"\\\\E989\\\"}.w-icon-shrink:before{content:\\\"\\\\E98A\\\"}.w-icon-filter:before{content:\\\"\\\\EA5B\\\"}.w-icon-clear-formatting:before{content:\\\"\\\\EA6F\\\"}.w-icon-file-empty:before{content:\\\"\\\\E924\\\"}.w-icon-file-class-code:before{content:\\\"\\\\EA81\\\"}.fullscreen-editor{position:fixed!important;height:100%!important;left:0!important;top:0!important;background-color:#fff;z-index:9999}.fullscreen-editor,.fullscreen-editor .w-e-toolbar{width:100%!important}.fullscreen-editor .w-e-text-container{width:100%!important;height:95%!important}.code_pannel{position:absolute;top:0;left:50%;z-index:10002;height:280px;width:600px;padding:5px 10px;margin-left:-300px;background:#fff;box-shadow:1px 1px 8px rgba(0,0,0,.3);display:none;overflow:hidden}.code_pannel .closePannel{position:absolute;top:10px;right:10px;width:15px;height:15px;color:#999;cursor:pointer}.code_pannel .closePannel:hover{color:#000}.code_pannel>h2{color:#333;border-bottom:1px solid #f1f1f1}.code_pannel .pannelInput,.code_pannel>h2{width:100%;height:30px;font-size:14px;line-height:30px}.code_pannel .pannelInput{margin-top:5px;padding:0 10px;border:0;border-bottom:1px solid #f1f1f1;background:#fff;outline:0}.code_pannel .pannelTextarea{width:100%;height:145px;margin-top:10px;padding:5px;border:1px solid #f1f1f1;background:#fff;outline:0;font-size:14px;line-height:20px}.code_pannel .pannelInput:focus,.code_pannel .pannelTextarea:focus{border-color:#1e88e5}.code_pannel .pannelSubmit{float:right;font-size:14px;color:#1e88e5;border:0;padding:5px 10px;background:#fff;cursor:pointer;border-radius:3px;margin:5px 0}.code_pannel .pannelSubmit:hover{background:#f1f1f1}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(9)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return fullscreen; });\nvar fullscreen = {\n  methods: {\n    initFullscreen: function initFullscreen() {\n      var _this = this;\n\n      var enlarge = '<i title=\"全屏\" class=\"w-icon-enlarge\"></i>';\n      var shrink = '<i title=\"全屏\" class=\"w-icon-shrink\"></i>';\n      var isFullscreen = false;\n      var fullscreenBtn = this.createBtn(enlarge);\n      this.toolbar.appendChild(fullscreenBtn);\n      fullscreenBtn.addEventListener('click', function (_) {\n        _this.editorEle.className = isFullscreen ? '' : 'fullscreen-editor';\n        fullscreenBtn.innerHTML = isFullscreen ? enlarge : shrink;\n        isFullscreen = !isFullscreen;\n      }, false);\n    }\n  }\n};\n\n/***/ }),\n/* 11 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return clearStyle; });\nvar clearStyle = {\n  methods: {\n    initClearStyle: function initClearStyle() {\n      var _this = this;\n\n      var clearStyleBtn = this.createBtn('<i title=\"一键过滤文字样式\" class=\"w-icon-filter\"></i>');\n      this.toolbar.appendChild(clearStyleBtn);\n      clearStyleBtn.addEventListener('click', function (_) {\n        var html = _this.clearStyle();\n        _this.editor.cmd.do('insertHTML', html);\n        _this.editor.txt.html(html);\n      }, false);\n    },\n    clearStyle: function clearStyle() {\n      // editor.txt.html()获取的内容无法清除<style>标签的样式\n      // 所以要清除<style>标签\n      // editor.txt.html()有时候获取的HTML会带样式，所以还是再过滤一次\n      var arr = this.textWrap.getElementsByTagName('*');\n      Array.from(arr).map(function (item) {\n        if (item.style) {\n          item.removeAttribute('style');\n        }\n        if (item.className) {\n          item.removeAttribute('class');\n        }\n      });\n      // 因为有的style属性没有过滤到，所以要用上面的removeAttribute去掉\n      return this.editor.txt.html() // textWrap.innerHTML\n      .replace(/ style=\\\"(.*?)\\\"/ig, '').replace(/ style=\\'(.*?)\\'/ig, '').replace(/ class=\\\"(.*?)\\\"/ig, '').replace(/ class=\\'(.*?)\\'/ig, '')\n      // word文档复制过来的样式\n      .replace(/ lang=\\\"(.*?)\\\"/ig, '').replace(/ face=\\\"(.*?)\\\"/ig, '').replace(/ size=\\\"(.*?)\\\"/ig, '').replace(/ align=\\\"(.*?)\\\"/ig, '').replace(/ color=\\\"(.*?)\\\"/ig, '').replace(/ border=\\\"(.*?)\\\"/ig, '').replace(/<style>[\\s\\S]*?<\\/style>/ig, '').replace(/<o:p>[\\s\\S]*?<\\/o:p>/ig, '').replace(/<!--[\\s\\S]*?-->/ig, '');\n    }\n  }\n};\n\n/***/ }),\n/* 12 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return clearFormat; });\nvar clearFormat = {\n  methods: {\n    clearFormat: function clearFormat() {\n      var str = this.editor.txt.html();\n      var arr = str.split(/(<[^>]*>([\\s\\S]*?)|<[^>]*><\\/[^>]*>)/);\n\n      // 去除空字符串，结束标签\n      var newContent = arr.filter(function (item) {\n        return item !== '' && !item.includes('</');\n      }).filter(function (item) {\n        // 去掉起始标签\n        return !item.includes('<') || item.startsWith('<img');\n      }).map(function (item) {\n        return '<p>' + item + '</p>';\n      }).join('');\n      // console.log(newContent)\n      return newContent;\n    },\n    initClearFormat: function initClearFormat() {\n      var _this = this;\n\n      var clearFormatBtn = this.createBtn('<i title=\"一键清除文字格式\" class=\"w-icon-clear-formatting\"></i>');\n      this.toolbar.appendChild(clearFormatBtn);\n      clearFormatBtn.addEventListener('click', function (_) {\n        var formatContent = _this.clearFormat();\n        _this.$emit('input', formatContent);\n        _this.editor.txt.html(formatContent);\n      }, false);\n    }\n  }\n};\n\n/***/ }),\n/* 13 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return clearAll; });\nvar clearAll = {\n  methods: {\n    initClearAll: function initClearAll() {\n      var _this = this;\n\n      var clearAllBtn = this.createBtn('<i title=\"一键清空编辑器\" class=\"w-icon-file-empty\"></i>');\n      this.toolbar.appendChild(clearAllBtn);\n      clearAllBtn.addEventListener('click', function (_) {\n        _this.clearAll();\n      }, false);\n    },\n    clearAll: function clearAll() {\n      this.editor.txt.clear();\n      this.editor.cmd.do('insertHTML', '<p><br></p>');\n    }\n  }\n};\n\n/***/ }),\n/* 14 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return insertCode; });\nvar insertCode = {\n  methods: {\n    initInsertCode: function initInsertCode() {\n      var _this = this;\n\n      var insertCodeBtn = this.createBtn('<i title=\"插入带类名的代码块\" class=\"w-icon-file-class-code\"></i>');\n      this.toolbar.appendChild(insertCodeBtn);\n      insertCodeBtn.addEventListener('click', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n        var pannel = document.querySelector('#' + _this.id + '_codePannel');\n        if (!pannel) {\n          _this.createPannel();\n        } else {\n          pannel.style.display = 'block';\n        }\n        _this.bindEvents();\n      }, false);\n    },\n    bindEvents: function bindEvents() {\n      var _this2 = this;\n\n      var pannel = document.querySelector('#' + this.id + '_codePannel');\n      var close = document.querySelector('#' + this.id + '_closePannel');\n      var input = document.querySelector('#' + this.id + '_pannelInput');\n      var textarea = document.querySelector('#' + this.id + '_pannelTextarea');\n      var submit = document.querySelector('#' + this.id + '_pannelSubmit');\n      close.addEventListener('click', function (e) {\n        e.stopPropagation();\n        pannel.style.display = 'none';\n        input.value = '';\n        textarea.value = '';\n      }, false);\n      submit.addEventListener('click', function (e) {\n        e.stopPropagation();\n        if (input.value && textarea.value) {\n          _this2.insertCode(input.value, textarea.value);\n          pannel.style.display = 'none';\n          input.value = '';\n          textarea.value = '';\n        } else {\n          pannel.style.display = 'none';\n          input.value = '';\n          textarea.value = '';\n        }\n      }, false);\n    },\n    createPannel: function createPannel() {\n      var pannel = document.createElement('div');\n      var close = document.createElement('i');\n      var h2 = document.createElement('h2');\n      var input = document.createElement('input');\n      var textarea = document.createElement('textarea');\n      var submit = document.createElement('button');\n      pannel.id = this.id + '_codePannel';\n      close.id = this.id + '_closePannel';\n      input.id = this.id + '_pannelInput';\n      input.className = 'pannelInput';\n      textarea.id = this.id + '_pannelTextarea';\n      textarea.className = 'pannelTextarea';\n      input.setAttribute('placeholder', 'className');\n      textarea.setAttribute('placeholder', 'code');\n      submit.id = this.id + '_pannelSubmit';\n      submit.className = 'pannelSubmit';\n      submit.innerText = '插入';\n      h2.innerText = '插入带类名的代码：';\n      close.className = 'w-e-icon-close w-e-panel-close closePannel';\n      pannel.appendChild(close);\n      pannel.appendChild(h2);\n      pannel.appendChild(input);\n      pannel.appendChild(textarea);\n      pannel.appendChild(submit);\n      pannel.className = 'code_pannel';\n      this.container.appendChild(pannel);\n      pannel.style.display = 'block';\n    },\n    replaceHtmlSymbol: function replaceHtmlSymbol(html) {\n      if (html == null) {\n        return '';\n      }\n      return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;');\n    },\n    insertCode: function insertCode(className, code) {\n      this.editor.cmd.do('insertHTML', '<pre class=\"' + className + '\"><code class=\"' + className + '\">' + this.replaceHtmlSymbol(code) + '</code></pre><p><br></p>');\n    }\n  }\n};\n\n/***/ }),\n/* 15 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":_vm.id}})}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// vue-wangeditor-simple.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e3d668dd160a79c8b8b2","<template lang=\"html\">\n  <div :id=\"id\"></div>\n</template>\n\n<script>\nimport E from 'wangeditor'\nimport './editor.css'\nimport { fullscreen } from './plugins/fullscreen'\nimport { clearStyle } from './plugins/clearStyle'\nimport { clearFormat } from './plugins/clearFormat'\nimport { clearAll } from './plugins/clearAll'\nimport { insertCode } from './plugins/insertCode'\nexport default {\n  name: 'VueWangeditor',\n  mixins: [fullscreen, clearStyle, clearFormat, clearAll, insertCode],\n  props: {\n    options: {\n      type: Object,\n      default:  _ => { return {} }\n    },\n    id: String,\n    initContent: String,\n    value: String,\n    disabled: Boolean\n  },\n  data () {\n    return {\n      editor: {}\n    }\n  },\n  watch: {\n    initContent (val) {\n      this.editor.txt.html(val)\n      this.$emit('input', val)\n      // this.$emit('update:text', this.editor.txt.text())\n      this.$emit('get-text', this.editor.txt.text())\n    },\n    disabled (val) {\n      this.editor.$textElem.attr('contenteditable', !val)\n    }\n  },\n  computed: {\n    editorEle () {\n      if (document.querySelector(`#${this.id}`)) {\n        return document.querySelector(`#${this.id}`)\n      }\n    },\n    toolbar () {\n      if (document.querySelector(`#${this.id} .w-e-toolbar`)) {\n        return document.querySelector(`#${this.id} .w-e-toolbar`)\n      }\n    },\n    container () {\n      if (document.querySelector(`#${this.id} .w-e-text-container`)) {\n        return document.querySelector(`#${this.id} .w-e-text-container`)\n      }\n    },\n    textWrap () {\n      if (document.querySelector(`#${this.id} .w-e-text`)) {\n        return document.querySelector(`#${this.id} .w-e-text`)\n      }\n    },\n    menuBtns () {\n      if (document.querySelectorAll(`#${this.id} .w-e-menu`)) {\n        return document.querySelectorAll(`#${this.id} .w-e-menu`)\n      }\n    }\n  },\n  methods: {\n    createBtn (btnHtml) {\n      let btn = document.createElement('div')\n      btn.className = 'w-e-menu'\n      // btn.style.zIndex = '10001'\n      btn.innerHTML = btnHtml\n      return btn\n    },\n    initSize () {\n      if (this.options.width) {\n        this.container.style.width = this.options.width\n        this.toolbar.style.width = this.options.width\n      }\n      if (this.options.height) {\n        this.container.style.height = this.options.height\n      }\n    },\n    fixedCss () {\n      // position: relative + z-index => 导致了子元素的层级无法超过父元素的兄弟元素，故去掉\n      // bug #14\n      if (this.menuBtns.length > 0) {\n        Array.from(this.menuBtns).map(btn => {\n          if (btn.getAttribute('style')) btn.removeAttribute('style')\n        })\n      }\n      // container有同样的问题\n      let cssText = this.container.getAttribute('style')\n      cssText = cssText.replace('z-index', 'zIndex')\n      this.container.style.cssText = cssText\n    }\n  },\n  mounted () {\n    this.editor = new E('#' + this.id)\n\n    // init change event\n    this.editor.customConfig.onchange = html => {\n      this.$emit('input', html)\n      this.$emit('update:text', this.editor.txt.text())\n    }\n\n    // init props options\n    Object.keys(this.options).map(property => {\n      this.editor.customConfig[property] = this.options[property]\n    })\n\n    // create the editor\n    this.editor.create()\n\n    this.initContent && this.editor.txt.html(this.initContent)\n\n    this.initSize()\n    this.fixedCss()\n\n    // clearStyle\n    if (this.options.menus && this.options.menus.includes('clearStyle')) {\n      this.initClearStyle()\n    }\n\n    // clearFormat\n    if (this.options.menus && this.options.menus.includes('clearFormat')) {\n      this.initClearFormat()\n    }\n\n    // clearAll\n    if (this.options.menus && this.options.menus.includes('clearAll')) {\n      this.initClearAll()\n    }\n\n    // insertCode\n    if (this.options.menus && this.options.menus.includes('insertCode')) {\n      this.initInsertCode()\n    }\n\n    // fullscreen\n    if (this.options.menus && this.options.menus.includes('fullscreen')) {\n      this.initFullscreen()\n    }\n\n    this.editor.$textElem.attr('contenteditable', !this.disabled)\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/editor.vue","import VueWangeditor from './editor.vue'\n\n/* istanbul ignore next */\nVueWangeditor.install = function (Vue) {\n  Vue.component(VueWangeditor.name, VueWangeditor)\n}\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(VueWangeditor)\n}\n\nexport default VueWangeditor\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","var normalizeComponent = require(\"!../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./editor.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./editor.vue\"\n/* template */\nimport __vue_template__ from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-3aa57f8a\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./editor.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/editor.vue\n// module id = 2\n// module chunks = 0","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/component-normalizer.js\n// module id = 3\n// module chunks = 0","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            alt: '[坏笑]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n        }, {\n            alt: '[舔屏]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n        }, {\n            alt: '[污]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n        }]\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n            alt: '[草泥马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n            alt: '[神马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n            alt: '[浮云]'\n        }]\n    }, {\n        // tab 的标题\n        title: 'emoji',\n        // type -> 'emoji' / 'image'\n        type: 'emoji',\n        // content -> 数组\n        content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n            elemResult = replaceHtmlSymbol(elemResult);\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 100) {\n                // 间隔大于 100 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n                // val = encodeURIComponent(val)\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wangeditor/release/wangEditor.js\n// module id = 4\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js!./editor.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"af2083c0\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/editor.css\n// module id = 5\n// module chunks = 0","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"@font-face{font-family:w-icon;src:url(data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAA1EAAwAAAAADPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABHAAAAYAAAAGA4Zbj9k9TLzIAAAKcAAAAYAAAAGAPEgdsY21hcAAAAvwAAADEAAAAxL7TwtlnYXNwAAADwAAAAAgAAAAIAAAAEGdseWYAAAPIAAAGeAAABnjO8r8caGVhZAAACkAAAAA2AAAANhCeVXdoaGVhAAAKeAAAACQAAAAkB8ID5mhtdHgAAAqcAAAAlAAAAJQiAABCbG9jYQAACzAAAABMAAAATBDoElhtYXhwAAALfAAAACAAAAAgACsAVm5hbWUAAAucAAABhgAAAYaZSgn7cG9zdAAADSQAAAAgAAAAIAADAAAAAQAAAAoAHgAsAAFsYXRuAAgABAAAAAAAAAABAAAAAWxpZ2EACAAAAAEAAAABAAQABAAAAAEACgAAAAEAFAAHACYAkAC0APwBDgEkATwAAQAHAAkACwAMABcAGAAaACQABQAMABgAKAA6AFwAIAAFABYAFAAXABcAIwAHABQAEwAXABQAEQALAB8ACAAUABEAEQAIABUAFwALACIAEAARAAsACAAWAAQADAAUABYAEgAIABgAGAAPABMADQAgAAYACAATAAkACwARAAIABgAUAB4ABgAbABUACAATAAoAHgAHABMAEQAIABYADQALAAQACgAYACYAMgAhAAYAGQATABMACwARACEABgAPABEAGAALABYAHQAFAA8AEQALAAYAHQAKAA8AEQALAAQACwASABUAGAAcAAEABAAfAAYADgAWAA8AEwAQAAEABAAjAAgACwAWABIADwATAAgAEQABAAQAIgAJABwAFwAPABoAHAANAAUABwABAAQAIwACACQAAwPAAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADqggPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAqAAAACYAIAAEAAYAAQAgAC0AMQAzADcAYQBpAHAAdQB56STpiuoP6lvqb+qC//3//wAAAAAAIAAtADEAMwA3AGEAYwBrAHIAd+kk6YnqD+pb6m/qgf/9//8AAf/j/9f/1P/T/9D/p/+m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) format(\\\"woff\\\");font-weight:400;font-style:normal}[class*=\\\" w-icon-\\\"],[class^=w-icon-]{font-family:w-icon!important;speak:none;font-style:normal;font-weight:400;font-variant:normal;text-transform:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;letter-spacing:0;-webkit-font-feature-settings:\\\"liga\\\";-moz-font-feature-settings:\\\"liga=1\\\";-moz-font-feature-settings:\\\"liga\\\";-ms-font-feature-settings:\\\"liga\\\" 1;font-feature-settings:\\\"liga\\\";-webkit-font-variant-ligatures:discretionary-ligatures;font-variant-ligatures:discretionary-ligatures}.w-e-droplist{z-index:10010}.w-e-text-container .w-e-text h1{font-size:24px;margin:22px 0;font-weight:700}.w-e-text-container .w-e-text h2{font-size:22px;margin:20px 0;font-weight:700}.w-e-text-container .w-e-text h3{font-size:20px;margin:18px 0;font-weight:700}.w-e-text-container .w-e-text h4{font-size:18px;margin:16px 0;font-weight:700}.w-e-text-container .w-e-text h5{font-size:16px;margin:14px 0;font-weight:700}.w-e-text-container .w-e-text table td,.w-e-text-container .w-e-text table th{text-align:center}.w-e-text-container .w-e-text ul li{list-style-type:disc}.w-e-text-container .w-e-text ol li{list-style-type:decimal}.w-e-text-container .w-e-text b{font-weight:800}.w-e-text-container .w-e-text a{color:#2196f3;text-decoration:underline}.w-e-text-container .w-e-panel-container{z-index:10}.w-e-toolbar{flex-wrap:wrap;-webkit-box-lines:multiple}.w-icon-enlarge:before{content:\\\"\\\\E989\\\"}.w-icon-shrink:before{content:\\\"\\\\E98A\\\"}.w-icon-filter:before{content:\\\"\\\\EA5B\\\"}.w-icon-clear-formatting:before{content:\\\"\\\\EA6F\\\"}.w-icon-file-empty:before{content:\\\"\\\\E924\\\"}.w-icon-file-class-code:before{content:\\\"\\\\EA81\\\"}.fullscreen-editor{position:fixed!important;height:100%!important;left:0!important;top:0!important;background-color:#fff;z-index:9999}.fullscreen-editor,.fullscreen-editor .w-e-toolbar{width:100%!important}.fullscreen-editor .w-e-text-container{width:100%!important;height:95%!important}.code_pannel{position:absolute;top:0;left:50%;z-index:10002;height:280px;width:600px;padding:5px 10px;margin-left:-300px;background:#fff;box-shadow:1px 1px 8px rgba(0,0,0,.3);display:none;overflow:hidden}.code_pannel .closePannel{position:absolute;top:10px;right:10px;width:15px;height:15px;color:#999;cursor:pointer}.code_pannel .closePannel:hover{color:#000}.code_pannel>h2{color:#333;border-bottom:1px solid #f1f1f1}.code_pannel .pannelInput,.code_pannel>h2{width:100%;height:30px;font-size:14px;line-height:30px}.code_pannel .pannelInput{margin-top:5px;padding:0 10px;border:0;border-bottom:1px solid #f1f1f1;background:#fff;outline:0}.code_pannel .pannelTextarea{width:100%;height:145px;margin-top:10px;padding:5px;border:1px solid #f1f1f1;background:#fff;outline:0;font-size:14px;line-height:20px}.code_pannel .pannelInput:focus,.code_pannel .pannelTextarea:focus{border-color:#1e88e5}.code_pannel .pannelSubmit{float:right;font-size:14px;color:#1e88e5;border:0;padding:5px 10px;background:#fff;cursor:pointer;border-radius:3px;margin:5px 0}.code_pannel .pannelSubmit:hover{background:#f1f1f1}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./src/editor.css\n// module id = 6\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 7\n// module chunks = 0","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = require('./listToStyles')\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader/lib/addStylesClient.js\n// module id = 8\n// module chunks = 0","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-style-loader/lib/listToStyles.js\n// module id = 9\n// module chunks = 0","export const fullscreen = {\n  methods: {\n    initFullscreen () {\n      let enlarge = '<i title=\"全屏\" class=\"w-icon-enlarge\"></i>'\n      let shrink = '<i title=\"全屏\" class=\"w-icon-shrink\"></i>'\n      let isFullscreen = false\n      let fullscreenBtn = this.createBtn(enlarge)\n      this.toolbar.appendChild(fullscreenBtn)\n      fullscreenBtn.addEventListener('click', _ => {\n        this.editorEle.className = isFullscreen ? '' : 'fullscreen-editor'\n        fullscreenBtn.innerHTML = isFullscreen ? enlarge : shrink\n        isFullscreen = !isFullscreen\n      }, false)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/fullscreen.js","export const clearStyle = {\n  methods: {\n    initClearStyle () {\n      let clearStyleBtn = this.createBtn('<i title=\"一键过滤文字样式\" class=\"w-icon-filter\"></i>')\n      this.toolbar.appendChild(clearStyleBtn)\n      clearStyleBtn.addEventListener('click', _ => {\n        let html = this.clearStyle()\n        this.editor.cmd.do('insertHTML', html)\n        this.editor.txt.html(html)\n      }, false)\n    },\n    clearStyle () {\n      // editor.txt.html()获取的内容无法清除<style>标签的样式\n      // 所以要清除<style>标签\n      // editor.txt.html()有时候获取的HTML会带样式，所以还是再过滤一次\n      let arr = this.textWrap.getElementsByTagName('*')\n      Array.from(arr).map(item => {\n        if (item.style) {\n          item.removeAttribute('style')\n        }\n        if (item.className) {\n          item.removeAttribute('class')\n        }\n      })\n      // 因为有的style属性没有过滤到，所以要用上面的removeAttribute去掉\n      return this.editor.txt.html()// textWrap.innerHTML\n             .replace(/ style=\\\"(.*?)\\\"/ig, '')\n             .replace(/ style=\\'(.*?)\\'/ig, '')\n             .replace(/ class=\\\"(.*?)\\\"/ig, '')\n             .replace(/ class=\\'(.*?)\\'/ig, '')\n             // word文档复制过来的样式\n             .replace(/ lang=\\\"(.*?)\\\"/ig, '')\n             .replace(/ face=\\\"(.*?)\\\"/ig, '')\n             .replace(/ size=\\\"(.*?)\\\"/ig, '')\n             .replace(/ align=\\\"(.*?)\\\"/ig, '')\n             .replace(/ color=\\\"(.*?)\\\"/ig, '')\n             .replace(/ border=\\\"(.*?)\\\"/ig, '')\n             .replace(/<style>[\\s\\S]*?<\\/style>/ig, '')\n             .replace(/<o:p>[\\s\\S]*?<\\/o:p>/ig, '')\n             .replace(/<!--[\\s\\S]*?-->/ig, '')\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/clearStyle.js","export const clearFormat = {\n  methods: {\n    clearFormat () {\n      let str = this.editor.txt.html()\n      let arr = str.split(/(<[^>]*>([\\s\\S]*?)|<[^>]*><\\/[^>]*>)/)\n\n      // 去除空字符串，结束标签\n      let newContent = arr.filter(item => {\n        return item !== '' && !item.includes('</')\n      }).filter(item => {\n        // 去掉起始标签\n        return !item.includes('<') || item.startsWith('<img')\n      }).map(item => {\n        return `<p>${item}</p>`\n      }).join('')\n      // console.log(newContent)\n      return newContent\n    },\n    initClearFormat () {\n      let clearFormatBtn = this.createBtn('<i title=\"一键清除文字格式\" class=\"w-icon-clear-formatting\"></i>')\n      this.toolbar.appendChild(clearFormatBtn)\n      clearFormatBtn.addEventListener('click', _ => {\n        let formatContent = this.clearFormat()\n        this.$emit('input', formatContent)\n        this.editor.txt.html(formatContent)\n      }, false)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/clearFormat.js","export const clearAll = {\n  methods: {\n    initClearAll () {\n      let clearAllBtn = this.createBtn('<i title=\"一键清空编辑器\" class=\"w-icon-file-empty\"></i>')\n      this.toolbar.appendChild(clearAllBtn)\n      clearAllBtn.addEventListener('click', _ => {\n        this.clearAll()\n      }, false)\n    },\n    clearAll () {\n      this.editor.txt.clear()\n      this.editor.cmd.do('insertHTML', '<p><br></p>')\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/clearAll.js","export const insertCode = {\n  methods: {\n    initInsertCode () {\n      let insertCodeBtn = this.createBtn('<i title=\"插入带类名的代码块\" class=\"w-icon-file-class-code\"></i>')\n      this.toolbar.appendChild(insertCodeBtn)\n      insertCodeBtn.addEventListener('click', e => {\n        e.stopPropagation()\n        e.preventDefault()\n        let pannel = document.querySelector(`#${this.id}_codePannel`)\n        if (!pannel) {\n          this.createPannel()\n        } else {\n          pannel.style.display = 'block'\n        }\n        this.bindEvents()\n      }, false)\n    },\n    bindEvents () {\n      let pannel = document.querySelector(`#${this.id}_codePannel`)\n      let close = document.querySelector(`#${this.id}_closePannel`)\n      let input = document.querySelector(`#${this.id}_pannelInput`)\n      let textarea = document.querySelector(`#${this.id}_pannelTextarea`)\n      let submit = document.querySelector(`#${this.id}_pannelSubmit`)\n      close.addEventListener('click', e => {\n        e.stopPropagation()\n        pannel.style.display = 'none'\n        input.value = ''\n        textarea.value = ''\n      }, false)\n      submit.addEventListener('click', e => {\n        e.stopPropagation()\n        if (input.value && textarea.value) {\n          this.insertCode(input.value, textarea.value)\n          pannel.style.display = 'none'\n          input.value = ''\n          textarea.value = ''\n        } else {\n          pannel.style.display = 'none'\n          input.value = ''\n          textarea.value = ''\n        }\n      }, false)\n    },\n    createPannel () {\n      let pannel = document.createElement('div')\n      let close = document.createElement('i')\n      let h2 = document.createElement('h2')\n      let input = document.createElement('input')\n      let textarea = document.createElement('textarea')\n      let submit = document.createElement('button')\n      pannel.id = this.id + '_codePannel'\n      close.id = this.id + '_closePannel'\n      input.id = this.id + '_pannelInput'\n      input.className = 'pannelInput'\n      textarea.id = this.id + '_pannelTextarea'\n      textarea.className = 'pannelTextarea'\n      input.setAttribute('placeholder', 'className')\n      textarea.setAttribute('placeholder', 'code')\n      submit.id = this.id + '_pannelSubmit'\n      submit.className = 'pannelSubmit'\n      submit.innerText = '插入'\n      h2.innerText = '插入带类名的代码：'\n      close.className = 'w-e-icon-close w-e-panel-close closePannel'\n      pannel.appendChild(close)\n      pannel.appendChild(h2)\n      pannel.appendChild(input)\n      pannel.appendChild(textarea)\n      pannel.appendChild(submit)\n      pannel.className = 'code_pannel'\n      this.container.appendChild(pannel)\n      pannel.style.display = 'block'\n    },\n    replaceHtmlSymbol(html) {\n      if (html == null) {\n        return ''\n      }\n      return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;')\n    },\n    insertCode (className, code) {\n      this.editor.cmd.do('insertHTML', `<pre class=\"${className}\"><code class=\"${className}\">${this.replaceHtmlSymbol(code)}</code></pre><p><br></p>`)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/plugins/insertCode.js","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":_vm.id}})}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-3aa57f8a\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/editor.vue\n// module id = 15\n// module chunks = 0"],"sourceRoot":""}